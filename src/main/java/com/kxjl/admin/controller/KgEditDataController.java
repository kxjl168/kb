/**
 * Copyright (c) 2019 kxjl All Rights Reserved.
 * 
 * This software license agreement (the "Agreement") is a legal agreement between the user 
 * ("You" or the "User") and kxjl ("kxjl") 
 * for the software products (the "Software") and related services (the "Service") that 
 * accompanies this Agreement, as may be updated or replaced by feature enhancements, 
 * updates or maintenance releases and any services that may be provided by kxjl under this Agreement. 
 * You are not allowed to download, install or use the Software or to use Services unless 
 * you accept all the terms and conditions of this Agreement. Your downloading, 
 * installation and use of the Software shall be regarded as your acceptance of the Agreement 
 * and your agreement to be bound by all the terms and conditions of this Agreement.
 * 
 * The above notice shall be included in all copies or substantial portions of the Software.
 * 
 * The software is provided "as is", without warranty of any kind, express or implied, 
 * including but not limited to the warranties of merchantability, fitness for a particular 
 * purpose and noninfringement. In no event shall the authors or copyright holders be 
 * liable for any claim, damages or other liability, whether in an action of contract, 
 * tort or otherwise, arising from, out of or in connection with the software or the use 
 * or other dealings in the software.
 */
package com.kxjl.admin.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kxjl.admin.common.Pagination;
import com.kxjl.admin.common.WZResponseEntity;
import com.kxjl.admin.common.LoginUser;
import com.kxjl.base.aopAspect.CurrentUser;
import com.kxjl.admin.util.Constants;
import com.kxjl.admin.util.Page;
import com.kxjl.admin.persistence.entity.KgDataAuditLog;
import com.kxjl.admin.persistence.entity.KgEditData;
import com.kxjl.admin.persistence.entity.KgEditData;
import com.kxjl.admin.service.KgDataAuditLogService;
import com.kxjl.admin.service.KgEditDataService;
import com.kxjl.admin.service.KgEditDataService;

/**
 * autoGenerated
 * 
 * @date 2020年06月08日 11:50:55
 * @author Generator
 */
@RestController
@RequestMapping("/kg/kg-edit-data")
public class KgEditDataController {

	Logger logger = LoggerFactory.getLogger(KgEditDataController.class);

	/**
	 * <p>
	 * BussinessService
	 * </p>
	 */
	@Autowired
	KgEditDataService kgEditDataService;
	
	@Autowired
	KgDataAuditLogService kgDataAuditLogService;

	/**
	 * <p>
	 * New Info
	 * </p>
	 * 
	 * @param kgSubGroup
	 * @return
	 */
	@PostMapping("/add")
	public WZResponseEntity<?> add(@RequestBody KgEditData kgSubGroup) {
		logger.info("kg add kgSubGroup:{}", kgSubGroup);
		return new WZResponseEntity<>(kgEditDataService.add(kgSubGroup));
	}

	/**
	 * <p>
	 * Modify Info
	 * </p>
	 * 
	 * @param kgSubGroup
	 * @return
	 */
	@PutMapping("/modify")
	public WZResponseEntity<?> modify(@RequestBody KgEditData kgSubGroup) {
		logger.info("kg modify kgSubGroup:{}", kgSubGroup);
		return new WZResponseEntity<>(kgEditDataService.modify(kgSubGroup));
	}

	/**
	 * <p>
	 * 删除我的修改，支持批量
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@PostMapping("/del/{id}")
	public WZResponseEntity<?> delete(@PathVariable String id) {

		return new WZResponseEntity<>(kgEditDataService.delete(id));
	}

	/**
	 * 提交审核，支持批量
	 * @param id
	 * @return
	 * @author:kxjl
	 * @date 2020年8月6日
	 */
	@PostMapping("/toaudit/{id}")
	public WZResponseEntity<?> toaudit(@PathVariable String id) {

		return new WZResponseEntity<>(kgEditDataService.toaudit(id));
	}
	
	/**
	 * 撤回还未审批的数据至我的修改
	 * @param id
	 * @return
	 * @author:kxjl
	 * @date 2020年8月6日
	 */
	@PostMapping("/tolocal/{id}")
	public WZResponseEntity<?> tolocal(@PathVariable String id) {

		return new WZResponseEntity<>(kgEditDataService.tolocal(id));
	}

	/**
	 * <p>
	 * query info by id
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@GetMapping("/get/{id}")
	public WZResponseEntity<KgEditData> getOne(@PathVariable String id) {
		logger.info("kg get kgSubGroup:{}", id);
		KgEditData result = kgEditDataService.getOne(id);
		if (result == null) {
			return new WZResponseEntity<>();
		}
		return new WZResponseEntity<>(result);
	}

	/**
	 * 我的改动，已提交分页查询
	 * 
	 * @param query
	 * @param pageCondition
	 * @return
	 * @author:kxjl
	 * @date 2020年6月9日
	 */
	@RequestMapping("/list")
	@ResponseBody
	public WZResponseEntity<List<KgEditData>> getListByPage(@CurrentUser LoginUser user, KgEditData query,
			Pagination pageCondition) {
		//System.out.println(pageCondition.getPageSize());

		if (query.getQueryStatesStr() != null) {
			String[] ids = query.getQueryStatesStr().split(",");
			query.setQueryStates(ids);
		}

		if (user != null) {
			if (!user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

				query.setEditUser(user.getUserId());
			}
		}

		Page<KgEditData> result = kgEditDataService.selectList(query, pageCondition);
		WZResponseEntity<List<KgEditData>> rst = new WZResponseEntity<>(result.getResults());
		rst.setPagination(result.getPageInfo());
		return rst;
	}
	
	/**
	 * 查询待审核
	 */
	@RequestMapping("/listAudit")
	@ResponseBody
	public WZResponseEntity<List<KgEditData>> selectToAuditList(@CurrentUser LoginUser user, KgEditData query,
			Pagination pageCondition) {
		//System.out.println(pageCondition.getPageSize());

//		if (query.getQueryStatesStr() != null) {
//			String[] ids = query.getQueryStatesStr().split(",");
//			query.setQueryStates(ids);
//		}
//
//		if (user != null) {
//			if (!user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {
//
//				query.setEditUser(user.getUserId());
//			}
//		}

		Page<KgEditData> result = kgEditDataService.selectToAuditList(query, pageCondition);
		WZResponseEntity<List<KgEditData>> rst = new WZResponseEntity<>(result.getResults());
		rst.setPagination(result.getPageInfo());
		return rst;
	}
	
	
	/**
	 * 查询已审核
	 */
	@RequestMapping("/listAuditDone")
	@ResponseBody
	public WZResponseEntity<List<KgDataAuditLog>> listAuditDone(@CurrentUser LoginUser user, KgDataAuditLog query,
			Pagination pageCondition) {
		//System.out.println(pageCondition.getPageSize());


		Page<KgDataAuditLog> result = kgEditDataService.listAuditDone(query, pageCondition);
		WZResponseEntity<List<KgDataAuditLog>> rst = new WZResponseEntity<>(result.getResults());
		rst.setPagination(result.getPageInfo());
		return rst;
	}
	
}