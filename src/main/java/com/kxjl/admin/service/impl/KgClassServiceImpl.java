/**
 * Copyright (c) 2019 kxjl All Rights Reserved.
 * 
 * This software license agreement (the "Agreement") is a legal agreement between the user 
 * ("You" or the "User") and kxjl ("kxjl") 
 * for the software products (the "Software") and related services (the "Service") that 
 * accompanies this Agreement, as may be updated or replaced by feature enhancements, 
 * updates or maintenance releases and any services that may be provided by kxjl under this Agreement. 
 * You are not allowed to download, install or use the Software or to use Services unless 
 * you accept all the terms and conditions of this Agreement. Your downloading, 
 * installation and use of the Software shall be regarded as your acceptance of the Agreement 
 * and your agreement to be bound by all the terms and conditions of this Agreement.
 * 
 * The above notice shall be included in all copies or substantial portions of the Software.
 * 
 * The software is provided "as is", without warranty of any kind, express or implied, 
 * including but not limited to the warranties of merchantability, fitness for a particular 
 * purpose and noninfringement. In no event shall the authors or copyright holders be 
 * liable for any claim, damages or other liability, whether in an action of contract, 
 * tort or otherwise, arising from, out of or in connection with the software or the use 
 * or other dealings in the software.
 */
package com.kxjl.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kxjl.admin.persistence.entity.KgClassExample;
import com.kxjl.admin.persistence.entity.KgClassKey;
import com.kxjl.admin.persistence.entity.KgDataLog;
import com.kxjl.admin.persistence.entity.KgDirTreeKey;
import com.kxjl.admin.persistence.entity.KgEditClass;
import com.kxjl.admin.persistence.entity.KgEditData;
import com.kxjl.admin.persistence.entity.KgEditEntity;
import com.kxjl.admin.persistence.entity.KgEditRelation;
import com.kxjl.admin.persistence.entity.KgEntity;
import com.kxjl.admin.persistence.entity.KgObjectProperty;
import com.kxjl.admin.persistence.entity.KgObjectSubGroup;
import com.kxjl.admin.persistence.entity.KgObjectToObject;
import com.kxjl.admin.persistence.entity.KgProperty;
import com.kxjl.admin.persistence.entity.KgPropertyDatatype;
import com.kxjl.admin.persistence.entity.KgPropertyDatatypeKey;
import com.kxjl.admin.persistence.entity.KgRelation;
import com.kxjl.admin.persistence.entity.KgTags;
import com.kxjl.admin.persistence.entity.KgClass;
import com.kxjl.admin.service.KgClassService;
import com.kxjl.admin.service.KgEditClassService;
import com.kxjl.admin.service.KgEditDataService;
import com.kxjl.admin.service.KgEntityService;
import com.kxjl.admin.service.KgObjectPropertyService;
import com.kxjl.admin.service.KgObjectSubGroupService;
import com.kxjl.admin.service.KgObjectToObjectService;
import com.kxjl.admin.service.KgPropertyService;
import com.kxjl.admin.service.KgTagsService;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.kxjl.admin.common.Pagination;
import com.kxjl.admin.common.WZResponseEntity;
import com.kxjl.admin.common.LoginUser;
import com.kxjl.base.util.UUIDUtil;


import com.kxjl.admin.util.Constants;
import com.kxjl.admin.util.O2oUtil;
import com.kxjl.admin.util.Page;
import com.kxjl.admin.util.PageUtil;
import com.kxjl.admin.persistence.adapter.dao.KgClassMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgDataLogMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditClassMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditDataMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditRelationMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEntityMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgObjectPropertyMapperAdapter;
import com.kxjl.admin.persistence.dao.KgClassMapper;
import com.kxjl.admin.persistence.dao.KgPropertyDatatypeMapper;

/**
 * autoGenerated
 * 
 * @date 2020年06月08日 11:50:55
 * @author Generator
 */
@Service("kgClassService")
public class KgClassServiceImpl implements KgClassService {

	@Autowired
	KgClassMapperAdapter kgClassMapperAdapter;

	@Autowired
	KgClassService kgClassService;

	@Autowired
	KgObjectPropertyMapperAdapter kgObjectPropertyMapperAdapter;

	@Autowired
	KgObjectToObjectService kgObjectToObjectService;

	@Autowired
	KgEntityMapperAdapter kgEntityMapperAdapter;

	@Autowired
	KgPropertyDatatypeMapper kgPropertyDatatypeMapper;
	@Autowired
	KgPropertyService kgPropertyService;

	@Autowired
	KgObjectPropertyService kgObjectPropertyService;

	@Autowired
	KgObjectSubGroupService kgObjectSubGroupService;

	@Autowired
	KgTagsService kgTagsService;

	@Autowired
	KgEditDataMapperAdapter kgEditDataMapperAdapter;

	@Autowired
	KgEditClassService kgEditClassService;

	@Autowired
	KgEditClassMapperAdapter kgEditClassMapperAdapter;
	@Autowired
	KgEditDataService kgEditDataService;
	@Autowired
	KgDataLogMapperAdapter kgDataLogMapperAdapter;

	
	   /**
     * 查询名称是否存在
     * @param item
     * @return
     * @author:kxjl
     * @date 2020年6月23日
     */
    public KgClass selectByName(KgClass item) {
    	return kgClassMapperAdapter.selectByName(item);
    }
    
	/**
	 * <p>
	 * New Info
	 * </p>
	 * 
	 * @param kgClass
	 * @return
	 */
	@Transactional
	public WZResponseEntity<?> add(LoginUser user, KgClass kgClass) {

		WZResponseEntity<?> rst = new WZResponseEntity<>();

		if (kgClass.getId() == null || kgClass.getId().equals(""))
			kgClass.setId(UUIDUtil.get32UUID());

		if (kgClass.getVersionId() == null || kgClass.getVersionId().equals(""))
			kgClass.setVersionId("1.0.0");

		if (kgClass.getParentId() == null || kgClass.getParentId().equals("")) {

			// 适配导入，根据名称查询parentId
			if (kgClass.getParentName() != null && !kgClass.getParentName().equals("")) {

				KgClass query = new KgClass();
				query.setClsName(kgClass.getParentName());
				KgClass tp = kgClassMapperAdapter.selectByName(query);
				if (tp != null) {
					kgClass.setParentId(tp.getId());
				}
			} else
				kgClass.setParentId("0");

		}

		KgClass tp = kgClassMapperAdapter.selectByName(kgClass);
		if (tp != null) {
			rst.setIsSuccess(false);
			rst.setErrorMsg("名称重复!");
		} else {

			if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

				// 处理attrs
				kgObjectPropertyService.resetClsAttr(user, kgClass.getId(), kgClass.getAttrs());

				kgClass.setSubIds(kgClass.getDirId());
				kgClass.setDirId("");
				// 处理领域
				kgObjectSubGroupService.resetObjectSubGroupAttr(kgClass.getId(), kgClass.getSubIds(), "1");

				if (kgClass.getParentId() == null || kgClass.getParentId().equals(""))
					kgClass.setParentId("0");

				// 添加对应 tag
				kgTagsService.addSameNameTag(kgClass);

				// 名称，编码
				addNameAndCodePros(kgClass);

				boolean isok = kgClassMapperAdapter.insertSelective(kgClass) > 0;

				rst.setIsSuccess(isok);

			} else {
				KgEditClass data = new KgEditClass(kgClass);
				//data.setId(UUIDUtil.get32UUID());
				//data.setId(UUIDUtil.get32UUID());
				data.setId(kgClass.getId());
				return kgEditClassService.add(user, data);
			}

		}

		return rst;
	}

	@Transactional
	public WZResponseEntity<?> saveOrmodify(LoginUser user, KgClass kgClass) {
		WZResponseEntity<?> rst = new WZResponseEntity<>();

		KgClass tp = kgClassMapperAdapter.selectByName(kgClass);
		if (tp != null) {
			kgClass.setId(tp.getId());
			kgClass.setVersionId(tp.getVersionId());
			rst = modify(user, kgClass);
		} else {
			rst = add(user, kgClass);
		}

		return rst;
	}

	/**
	 * <p>
	 * Modify Info
	 * </p>
	 * 
	 * @param kgClass
	 * @return
	 */
	@Transactional
	public WZResponseEntity<?> modify(LoginUser user, KgClass kgClass) {
		WZResponseEntity<?> rst = new WZResponseEntity<>();

		if (kgClass.getParentId() == null || kgClass.getParentId().equals("")) {

			// 适配导入，根据名称查询parentId
			if (kgClass.getParentName() != null && !kgClass.getParentName().equals("")) {

				KgClass query = new KgClass();
				query.setClsName(kgClass.getParentName());
				KgClass tp = kgClassMapperAdapter.selectByName(query);
				if (tp != null) {
					kgClass.setParentId(tp.getId());
				}
			} else
				kgClass.setParentId("0");

		}

		KgClass tp = kgClassMapperAdapter.selectByName(kgClass);
		if (tp != null && !tp.getId().equals(kgClass.getId())) {
			rst.setIsSuccess(false);
			rst.setErrorMsg("名称重复!");
		} else {

			if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

				// 处理attrs
				kgObjectPropertyService.resetClsAttr(user, kgClass.getId(), kgClass.getAttrs());

				kgClass.setSubIds(kgClass.getDirId());
				kgClass.setDirId("");
				// 处理领域
				kgObjectSubGroupService.resetObjectSubGroupAttr(kgClass.getId(), kgClass.getSubIds(), "1");

				// 添加对应 tag
				kgTagsService.addSameNameTag(kgClass);

				// 名称，编码
				addNameAndCodePros(kgClass);

				boolean isok = kgClassMapperAdapter.updateByPrimaryKeySelective(kgClass) > 0;
				rst.setIsSuccess(isok);
			} else {
				return kgEditClassService.modify(user, new KgEditClass(kgClass));
			}

		}

		return rst;
	}

	/**
	 * 属性json数据中补充默认的名称，编码
	 * 
	 * @param kgEntity
	 * @author:kxjl
	 * @date 2020年7月14日
	 */
	@Transactional
	private void addNameAndCodePros(KgClass item) {
		String jsPros = item.getProperties();

		KgProperty proName = kgPropertyService.getOneByName("名称", Constants.DEFULT_VERSION);
		KgProperty proCode = kgPropertyService.getOneByName("编码", Constants.DEFULT_VERSION);

		JSONArray jarray = new JSONArray();

		if (jsPros == null || jsPros.equals("") || jsPros.equals("[]")) {

			JSONObject jname = new JSONObject();
			jname.put("rule", proName.getDataTypeRule());
			jname.put("name", proName.getName());
			jname.put("value", item.getClsName());
			jname.put("label", proName.getName());
			jname.put("id", proName.getId());

			JSONObject jcode = new JSONObject();
			jcode.put("rule", proCode.getDataTypeRule());
			jcode.put("name", proCode.getName());
			jcode.put("value", item.getId());
			jcode.put("label", proCode.getName());
			jcode.put("id", proCode.getId());

			jarray.add(jname);
			jarray.add(jcode);

		} else {
			jarray = JSONArray.parseArray(jsPros);

			boolean hasName = false;
			boolean hasCode = false;
			for (int i = 0; i < jarray.size(); i++) {
				JSONObject ja = jarray.getJSONObject(i);
				if (ja.getString("label").equals(proName.getName())) {
					ja.put("value", item.getClsName());
					hasName = true;
				}
				if (ja.getString("label").equals(proCode.getName())) {
					ja.put("value", item.getId());
					hasCode = true;
				}
			}

			if (!hasName) {

				JSONObject jname = new JSONObject();
				jname.put("rule", proName.getDataTypeRule());
				jname.put("name", proName.getName());
				jname.put("value", item.getClsName());
				jname.put("label", proName.getName());
				jname.put("id", proName.getId());
				jarray.add(jname);
			}
			if (!hasCode) {

				JSONObject jcode = new JSONObject();
				jcode.put("rule", proCode.getDataTypeRule());
				jcode.put("name", proCode.getName());
				jcode.put("value", item.getId());
				jcode.put("label", proCode.getName());
				jcode.put("id", proCode.getId());
				jarray.add(jcode);

			}

		}

		item.setProperties(jarray.toJSONString());
	}

	@Transactional
	public WZResponseEntity<?> mergeCls(LoginUser user, String sourceId, String targetId, Boolean coverTarget) {
		WZResponseEntity<?> rst = new WZResponseEntity<>();

		KgClass squery = new KgClass();
		squery.setId(sourceId);
		KgClass ksource = kgClassMapperAdapter.selectDetailById(squery);

		KgClass tquery = new KgClass();
		tquery.setId(targetId);
		KgClass ktarget = kgClassMapperAdapter.selectDetailById(tquery);

		mergeAttr(coverTarget, ksource, ktarget);

		// 合并领域

		String[] sourceSubs = new String[] {};
		if (ksource.getSubIds() != null && !ksource.getSubIds().equals(""))
			sourceSubs = ksource.getSubIds().split(",");

		String subIds = (ktarget.getSubIds() == null) ? "" : ktarget.getSubIds();
		for (String sub : sourceSubs) {
			if (!subIds.contains(sub))
				if (subIds.equals(""))
					subIds = sub;
				else
					subIds += "," + sub;
		}

		ktarget.setDirId(subIds);
		modify(user, ktarget);

		// 合并概念关系
		// 替换所有sourceid-》targetId
		List<KgObjectToObject> relations = kgObjectToObjectService.getObjRelationByLevel(ksource, 1);
		for (int i = 0; i < relations.size(); i++) {
			KgObjectToObject relation = relations.get(i);
			if (relation.getFromId().equals(sourceId))
				relation.setFromId(targetId);

			if (relation.getToId().equals(sourceId))
				relation.setToId(targetId);

			kgObjectToObjectService.modify(relation);
		}

		// 替换实体 所属概念 ，同时替换标签
		KgEntity equery = new KgEntity();
		equery.setClsId(sourceId);
		equery.setOnlyOneLevel("true");// 只查询直接实体

		List<KgEntity> entitys = kgEntityMapperAdapter.selectList(equery);
		for (KgEntity kgEntity : entitys) {

			// 替换实体所属概念
			kgEntity.setClsId(targetId);
			kgEntity.setClsName(ktarget.getClsName());

			try {
				// 替换实体标签
				JSONArray jtags = JSONArray.parseArray(kgEntity.getTags());

				for (int i = 0; i < jtags.size(); i++) {
					JSONObject jtag = jtags.getJSONObject(i);
					if (jtag.getString("label").equals(ksource.getClsName())) {
						jtag.put("label", ktarget.getClsName());
						jtag.put("key", ktarget.getClsName());
						jtag.put("value", ktarget.getClsName() + "-#fff");
						jtag.put("color", "#fff");

						jtags.set(i, jtag);

						kgEntity.setTags(jtags.toJSONString());
						break;
					}
					// item.setTags("[{\"label\":\"" + clsName + "\",\"value\":\"" + clsName +
					// "\",\"key\":\"" + clsName + "\"}]");
				}

			} catch (Exception e) {
				// TODO: handle exception
			}

			kgEntityMapperAdapter.updateByPrimaryKeySelective(kgEntity);
		}

		// 删除源概念
		delete(user, ksource.getId(), ksource.getVersionId());

		rst.setIsSuccess(true);
		return rst;
	}

	@Transactional
	private void mergeAttr(Boolean coverTarget, KgClass ksource, KgClass ktarget) {
		List<String> allAttrs = new ArrayList<String>();
		String strAllAttrs = "";
		JSONArray JSONAllPro = new JSONArray();
		// 合并实体属性
		String[] sourceAttrs = new String[] {};
		if (ksource.getAttrs() != null && !ksource.getAttrs().equals(""))
			sourceAttrs = ksource.getAttrs().split(",");

		String[] targetAttrs = new String[] {};
		if (ktarget.getAttrs() != null && !ktarget.getAttrs().equals(""))
			targetAttrs = ktarget.getAttrs().split(",");

		// 目标属性
		for (String tattr : targetAttrs) {
			allAttrs.add(tattr);
		}
		for (String sattr : sourceAttrs) {
			boolean inTarget = false;
			for (String tattr : targetAttrs) {
				if (sattr.equals(tattr)) {
					inTarget = true;
					break;
				}
			}
			if (!inTarget)
				allAttrs.add(sattr);
		}

		for (String attr : allAttrs) {
			strAllAttrs += attr + ",";
		}
		if (!strAllAttrs.equals(""))
			strAllAttrs = strAllAttrs.substring(0, strAllAttrs.length() - 1);

		/// 合并概念属性
		JSONArray JSONSourcePro = new JSONArray();
		if (ksource.getProperties() != null)
			JSONSourcePro = JSONArray.parseArray(ksource.getProperties());

		JSONArray JSONTargetPro = new JSONArray();
		if (ktarget.getProperties() != null)
			JSONTargetPro = JSONArray.parseArray(ktarget.getProperties());

		for (int i = 0; i < JSONTargetPro.size(); i++) {
			JSONObject jattr = JSONTargetPro.getJSONObject(i);
			JSONAllPro.add(jattr);
		}

		for (int i = 0; i < JSONSourcePro.size(); i++) {
			JSONObject jsattr = JSONSourcePro.getJSONObject(i);

			JSONObject jtattr = null;
			for (int j = 0; j < JSONAllPro.size(); j++) {
				JSONObject tpattr = JSONAllPro.getJSONObject(j);
				if (tpattr.getString("name").equals(jsattr.getString("name"))) {
					// 名称一致即相同.
					jtattr = jsattr;
					break;
				}
			}
			if (jtattr == null) {
				JSONAllPro.add(jsattr);
			} else {
				// 覆盖目标属性
				if (coverTarget) {
					JSONAllPro = Cover(JSONAllPro, jtattr);
				}

			}
		}

		ktarget.setProperties(JSONAllPro.toString());
		ktarget.setAttrs(strAllAttrs);
	}

	/**
	 * 替换
	 * 
	 * @param list
	 * @param obj
	 * @return
	 * @author:kxjl
	 * @date 2020年7月14日
	 */
	@Transactional
	private JSONArray Cover(JSONArray list, JSONObject obj) {
		JSONArray array = new JSONArray();

		for (int i = 0; i < list.size(); i++) {
			if (!list.getJSONObject(i).getString("name").equals(obj.getString("name"))) {
				array.add(list.getJSONObject(i));
			}
		}
		array.add(obj);

		return array;
	}

	
	/**
	 * <p>
	 * Delete
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@Transactional
	public Boolean delete(LoginUser user, String id, String version) {
		// return kgClassMapperAdapter.deleteByPrimaryKey(id) > 0;

		if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {
			return deleteData(id, version);

		} else {
			return kgEditClassService.delete(user, id);
		}

	}

	private Boolean deleteData(String id, String version) {
		if (id.contains(",")) {
			String[] ids = id.split(",");
			for (String tid : ids) {
				KgClass tp = getOne(tid, version);
				tp.setDeleted("1");// 1删除
				kgClassMapperAdapter.updateByPrimaryKey(tp);

				deleteRelation(tid);
			}
			return true;
		} else {
			KgClass tp = getOne(id, version);
			if (tp != null) {
				tp.setDeleted("1");// 1删除

				deleteRelation(id);

				return kgClassMapperAdapter.updateByPrimaryKey(tp) > 0 ? true : false;
			}
			return true;
		}
	}

	// 删除关系，此删除关系暂不能同步至neo4j
	private void deleteRelation(String id) {

		KgClass source = new KgClass();
		source.setId(id);
		// 合并概念关系
		// 替换所有sourceid-》targetId
		List<KgObjectToObject> relations = kgObjectToObjectService.getObjRelationByLevel(source, 1);
		for (int i = 0; i < relations.size(); i++) {

			KgObjectToObject relation = relations.get(i);
			relation.setDeleted("1");

			kgObjectToObjectService.modify(relation);
		}
	}

	public WZResponseEntity getClsAttrs(String id, String version) {
		WZResponseEntity rst = new WZResponseEntity<>();
		JSONArray jarray = new JSONArray();
		try {

			KgClass cls = getOne(id, version);
			if (cls.getAttrs() != null && !cls.getAttrs().equals("")) {
				String[] attrids = cls.getAttrs().split(",");

				for (String aid : attrids) {

					KgProperty kgProperty = kgPropertyService.getOne(aid, version);
					if (kgProperty == null)
						continue;
					//
					// KgPropertyDatatypeKey ptypeKey = new KgPropertyDatatypeKey();
					// ptypeKey.setId(kgProperty.getDataTypeId());
					// ptypeKey.setVersionId(Constants.DEFULT_VERSION);
					// KgPropertyDatatype ptype =
					// kgPropertyDatatypeMapper.selectByPrimaryKey(ptypeKey);
					//
					// ptype.setEnableEmpty(kgProperty.getCannull());
					//
					// JSONObject jobj = JSONObject.parseObject(JSONObject.toJSONString(ptype));
					// jobj.put("clsId", kgProperty.getClsId());// 选择实体类型时的，限定cls类型
					//
					// // TODO
					//
					// // value

					// kgProperty.setDataTypeRule(jobj.toJSONString());

					JSONObject jattr = JSON.parseObject(JSONObject.toJSONString(kgProperty));

					// 补充web react MoreAttr UI需要的属性
					// label
					jattr.put("label", kgProperty.getName());

					// kgProperty.setDataTypeRule(jobj.toJSONString());
					// rule
					jattr.put("rule", kgProperty.getDataTypeRule());

					jarray.add(jattr);
				}

			}
		} catch (Exception e) {
			// TODO: handle exception
		}

		rst.setBody(jarray);
		rst.setIsSuccess(true);

		return rst;

	}

	/**
	 * 获取cls详情
	 * 
	 * @param id
	 * @param version
	 * @param showAllParentAttr
	 *            返回所有父类迭代属性
	 * @param showRelationAttr
	 *            返回当前cls的关系作为属性
	 * @return
	 * @author:kxjl
	 * @date 2020年7月8日
	 */
	@Transactional(readOnly = true)
	public KgClass getOne(String id, String version) {
		KgClass key = new KgClass();
		key.setId(id);
		key.setVersionId(version);

		List<KgClass> lst = kgClassMapperAdapter.selectList(key);
		if (lst != null && lst.size() > 0) {
			KgClass cur = lst.get(0);

			Map<String, String> attr = new HashMap<>();

			// 自身属性
			buildAllAttr(cur, attr);

			// if(showAllParentAttr)
			// 补充 所有属性，包括所有迭代父类属性。
			buildParentAttr(version, cur, attr);

			String attrids = "";
			String attrnames = "";
			for (String attrid : attr.keySet()) {
				attrids += attrid + ",";
				attrnames += attr.get(attrid) + ",";
			}
			if (attrids.endsWith(","))
				attrids = attrids.substring(0, attrids.length() - 1);
			if (attrnames.endsWith(","))
				attrnames = attrnames.substring(0, attrnames.length() - 1);

			cur.setAttrs(attrids);
			cur.setAttrNames(attrnames);

			return cur;
		} else
			 {
				KgEditClass editOne = kgEditClassService.getOne(id);
				if (editOne != null)
				{
					//编辑中
					editOne.setMyEdit("true");
					return editOne;
					
				}

				return null;

			}

		// return kgClassMapperAdapter.selectByPrimaryKey(key);
	}

	/**
	 * 递归所有父类属性
	 * 
	 * @param version
	 * @param cur
	 * @param attr
	 * @author:kxjl
	 * @date 2020年7月7日
	 */
	private void buildParentAttr(String version, KgClass cur, Map<String, String> attr) {
		if (cur.getParentId() != null && !cur.getParentId().equals("0")) {
			KgClass ParentCls = getOne(cur.getParentId(), version);
			if(ParentCls!=null)
			{
			buildAllAttr(ParentCls, attr);

			buildParentAttr(version, ParentCls, attr);
			}
		}
	}

	private void buildAllAttr(KgClass cur, Map<String, String> attr) {
		if (cur.getAttrs() != null && cur.getAttrNames() != null) {
			String[] attrids = cur.getAttrs().split(",");
			String[] attrnames = cur.getAttrNames().split(",");

			for (int i = 0; i < attrids.length; i++) {
				attr.put(attrids[i], attrnames[i]);
			}

		}
	}

	/**
	 * <p>
	 * query all info
	 * </p>
	 * 
	 * @return
	 */
	@Transactional(readOnly = true)
	public List<KgClass> getAll() {
		KgClassExample example = new KgClassExample();
		return kgClassMapperAdapter.selectByExample(example);
	}

	/**
	 * 增加查询列表改动标记
	 * 
	 * @param user
	 * @param lst
	 * @author:kxjl
	 * @date 2020年8月6日
	 */
	private void addDiffFlag(LoginUser user, List<KgClass> lst) {
		// 增加修改标记
		KgEditData equery = new KgEditData();
		equery.setEditUser(user.getUserId());
		equery.setAuditState("1");// 未提交
		List<KgEditData> edatas = kgEditDataMapperAdapter.selectList(equery);

		KgEditData equery2 = new KgEditData();
		equery2.setEditUser(user.getUserId());
		equery2.setAuditState("2");// 未提交
		List<KgEditData> edataAudits = kgEditDataMapperAdapter.selectList(equery2);

		
		for (KgClass data : lst) {
			JSONArray edits = new JSONArray();

			for (KgEditData eitem : edatas) {
				JSONObject jedit = new JSONObject();

				if (data.getId().equals(eitem.getEditOriDataId()) || data.getId().equals(eitem.getEditDataId())

						|| (data.getId()).equals(O2oUtil.getOriId(eitem.getEditOriDataId()))

				) {

					jedit.put("editAction", eitem.getEditAction());
					jedit.put("auditState", "1");
					jedit.put("editDataId", eitem.getEditDataId());
					jedit.put("id", eitem.getId());
					jedit.put("dataType", eitem.getDataType());// 区分是修改了实体，还是修改了实体关系

					edits.add(jedit);

					// data.setMyEdit(eitem.getEditAction() + ":" + eitem.getEditDataId());
				}
			}

			for (KgEditData eitem : edataAudits) {
				JSONObject jedit = new JSONObject();
				if (data.getId().equals(eitem.getEditOriDataId()) || data.getId().equals(eitem.getEditDataId())
						|| (data.getId()).equals(O2oUtil.getOriId(eitem.getEditOriDataId()))

				) {
					jedit.put("editAction", eitem.getEditAction());
					jedit.put("auditState", "2");
					jedit.put("editDataId", eitem.getEditDataId());
					jedit.put("id", eitem.getId());
					jedit.put("dataType", eitem.getDataType());// 区分是修改了实体，还是修改了实体关系
					edits.add(jedit);
				}

				// data.setMyEdit("4:" + eitem.getEditDataId());
			}

			data.setMyEdit(edits.toJSONString());

		}

	}
	
	   /**
     * 根据实体id查询  指定用户编辑中的对应Edit实体数据,或者实体
     * @param entityid
     * @return
     * @author:kxjl
     * @date 2020年8月19日
     */
	public KgClass getOneByIdInAudit(String userid,String entityid) {
		
	
		KgClass tp =null;

		KgEditData q=new KgEditData();
		q.setEditUser(userid);
		q.setEditOriDataId(entityid);
		q.setQueryStates(new String[] {"1","2"});
		//q.setAuditState("1");//待提交的 或者已提交
		List<KgEditData> edatas= kgEditDataMapperAdapter.selectList(q);
		if(edatas!=null&&edatas.size()>0)
		{
			 tp= kgEditClassService. getOne( edatas.get(0).getEditDataId());
			 tp.setDataFromType("2");
		}
		
		if(tp==null)
		{
			KgEditData q2 = new KgEditData();
			q2.setEditUser(userid);
			q2.setEditDataId(entityid);
			q2.setQueryStates(new String[] { "1", "2" });
			// q.setAuditState("1");//待提交的 或者已提交
			List<KgEditData> edatas2 = kgEditDataMapperAdapter.selectList(q2);
			if (edatas2 != null && edatas2.size() > 0) {

				tp = kgEditClassService.getOne(edatas2.get(0).getEditDataId());
				if (tp != null)
					tp.setDataFromType("2");
			}
			
		}
		
		if (tp == null) {
			tp = getOne(entityid, Constants.DEFULT_VERSION);
			if (tp != null)
				tp.setDataFromType("1");
		}
		
		
		return tp;
		
	}

	/**
	 * 
	 * @param example
	 * @return
	 * @author:kxjl
	 * @date 2020年6月9日
	 */
	public Page<KgClass> selectList(LoginUser user, KgClass query, Pagination pageCondition) {
		com.github.pagehelper.Page pageinfo = PageUtil.getPage(pageCondition);

		//-1 查询实际数据
		if(query.getCurUser()==null||query.getCurUser().equals(""))
		query.setCurUser(user.getUserId());
		
		List<KgClass> lst = kgClassMapperAdapter.selectList(query);

		addDiffFlag(user, lst);

		Page<KgClass> page = new Page<KgClass>();
		page.setResults(lst);
		page.setPageNo(pageinfo.getPageNum());
		page.setPageSize(pageinfo.getPageSize());
		page.setTotalRecord((int) pageinfo.getTotal());

		return page;
	}

	/**
	 * 获取指定cls的下级cls
	 * 
	 * @param node
	 * @return
	 * @author:kxjl
	 * @date 2020年6月18日
	 */
	public List<KgClass> getTreeData(LoginUser user,KgClass node) {
		node.setCurUser(user.getUserId());
		List<KgClass> lst =kgClassMapperAdapter.getTreeData(node);
		
		addDiffFlag(user, lst);
		
		return lst;
	}

	@Transactional
	public WZResponseEntity<?> audit(LoginUser user, KgClass kgItem, KgEditData editData) {

		WZResponseEntity rst = new WZResponseEntity<>();
		rst.setIsSuccess(false);
		
		try {
			
		
		String auditRstId = "";// 当前审核合并后的数据id,也存到 对应的edit表中.
		if (editData.getAuditState().equals("5")) // 不通过
		{

		} else if (editData.getAuditState().equals("3") || editData.getAuditState().equals("4")) // 通过
		{

			KgClass olddata = getOne(kgItem.getId(), Constants.DEFULT_VERSION);

			// 多人修改,并且多个人全部为删除操作，则最后删除
			if (editData.getEditAction().contains(",")) {
				String[] actions = editData.getEditAction().split(",");
				boolean alldelete = true;
				for (String ac : actions) {
					if (!ac.equals("3")) {
						alldelete = false;
						break;
					}
				}
				if (alldelete) {
					deleteData(editData.getEditOriDataId(), Constants.DEFULT_VERSION);
				}

			}

			// 修改真实数据
			if (editData.getEditAction().equals("3"))// 单人删除
			{
				deleteData(editData.getEditOriDataId(), Constants.DEFULT_VERSION);
			} else if (editData.getEditAction().equals("1"))// 单人新增
			{
				//新增的数据id按 editData ori_id来处理，避免edit_与 正式数据id冲突
				//kgItem.setId(editData.getEditOriDataId());
				rst=add(user, kgItem);
				if(!rst.getIsSuccess())
					return rst;
			} else // 合并修改，只要有一个人不删除，均按修改操作
			{
				rst=modify(user, kgItem);
				if(!rst.getIsSuccess())
					return rst;
			}
			
		

			// 保存当前审核结果数据备份，包括删除的
			KgClass auditRst = getOne(kgItem.getId(), Constants.DEFULT_VERSION);
			if (auditRst != null) {

				KgEditClass edata = new KgEditClass(auditRst);
				auditRstId = UUIDUtil.get32UUID();
				edata.setId(auditRstId);
				kgEditClassService.addtionData(user, edata);
				kgEditClassMapperAdapter.insertSelective(edata);

			} else {
				// 保存删除的快照
				KgEditClass eolddata = new KgEditClass(olddata);
				auditRstId = UUIDUtil.get32UUID();
				eolddata.setId(auditRstId);
				eolddata.setDeleted("0");
				kgEditClassService.addtionData(user, eolddata);
				kgEditClassMapperAdapter.insertSelective(eolddata);
			}

			// 保存快照数据id
			editData.setAuditRstId(auditRstId);

			String idold = "";
			if (olddata != null) {
				// 保存编辑前数据备份-》edit表
				KgEditClass eolddata = new KgEditClass(olddata);
				idold = UUIDUtil.get32UUID();
				eolddata.setId(idold);
				kgEditClassService.addtionData(user, eolddata);
				kgEditClassMapperAdapter.insertSelective(eolddata);
			}

			// 记录数据修改日志
			KgDataLog dlog = new KgDataLog();
			dlog.setId(UUIDUtil.get32UUID());
			dlog.setAuditUser(user.getUserId());
			dlog.setDataId(kgItem.getId());
			dlog.setDataType("3");
			dlog.setEditAction(editData.getEditAction());
			dlog.setEditUser(editData.getEditUser());
			dlog.setEditUserName(editData.getEditUserName());

			// 记录对应备份的数据id
			dlog.setEditDataPre(idold);
			dlog.setEditDataNext(auditRstId);

			kgDataLogMapperAdapter.insertSelective(dlog);

		}

		// 修改审核数据
		kgEditDataService.audit(user, editData);

		rst.setIsSuccess(true);
		} catch (Exception e) {
			System.out.println(e);
			rst.setErrorMsg("审核失败! 关联属性还未通过审核!");
		}
		
		return rst;
	}

}