/**
 * Copyright (c) 2019 kxjl All Rights Reserved.
 * 
 * This software license agreement (the "Agreement") is a legal agreement between the user 
 * ("You" or the "User") and kxjl ("kxjl") 
 * for the software products (the "Software") and related services (the "Service") that 
 * accompanies this Agreement, as may be updated or replaced by feature enhancements, 
 * updates or maintenance releases and any services that may be provided by kxjl under this Agreement. 
 * You are not allowed to download, install or use the Software or to use Services unless 
 * you accept all the terms and conditions of this Agreement. Your downloading, 
 * installation and use of the Software shall be regarded as your acceptance of the Agreement 
 * and your agreement to be bound by all the terms and conditions of this Agreement.
 * 
 * The above notice shall be included in all copies or substantial portions of the Software.
 * 
 * The software is provided "as is", without warranty of any kind, express or implied, 
 * including but not limited to the warranties of merchantability, fitness for a particular 
 * purpose and noninfringement. In no event shall the authors or copyright holders be 
 * liable for any claim, damages or other liability, whether in an action of contract, 
 * tort or otherwise, arising from, out of or in connection with the software or the use 
 * or other dealings in the software.
 */
package com.kxjl.admin.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kxjl.admin.persistence.entity.KgRelationExample;
import com.kxjl.admin.persistence.entity.KgRelationKey;
import com.kxjl.admin.persistence.entity.KgSubGroup;
import com.kxjl.admin.persistence.entity.KgSubGroupKey;
import com.kxjl.admin.persistence.entity.KgClass;
import com.kxjl.admin.persistence.entity.KgDataLog;
import com.kxjl.admin.persistence.entity.KgEditData;
import com.kxjl.admin.persistence.entity.KgEditRelation;
import com.kxjl.admin.persistence.entity.KgEditSubGroup;
import com.kxjl.admin.persistence.entity.KgEntity;
import com.kxjl.admin.persistence.entity.KgObjectRelationKey;
import com.kxjl.admin.persistence.entity.KgProperty;
import com.kxjl.admin.persistence.entity.KgRelation;
import com.kxjl.admin.persistence.entity.KgRelation;
import com.kxjl.admin.service.KgEditDataService;
import com.kxjl.admin.service.KgEditRelationService;
import com.kxjl.admin.service.KgObjectPropertyService;
import com.kxjl.admin.service.KgRelationService;
import com.alibaba.fastjson.JSONObject;
import com.kxjl.admin.common.Pagination;
import com.kxjl.admin.common.WZResponseEntity;
import com.kxjl.admin.common.LoginUser;
import com.kxjl.base.util.UUIDUtil;
import com.kxjl.admin.util.Constants;
import com.kxjl.admin.util.Page;
import com.kxjl.admin.util.PageUtil;
import com.kxjl.admin.persistence.adapter.dao.KgDataLogMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditDataMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditRelationMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgRelationMapperAdapter;
import com.kxjl.admin.persistence.dao.KgRelationMapper;

/**
 * autoGenerated
 * 
 * @date 2020年06月08日 11:50:55
 * @author Generator
 */
@Service("kgRelationService")
public class KgRelationServiceImpl implements KgRelationService {

	@Autowired
	KgRelationMapperAdapter kgRelationMapper;

	@Autowired
	KgObjectPropertyService kgObjectPropertyService;

	@Autowired
	KgEditRelationService kgEditRelationService;
	
	@Autowired
	KgEditDataMapperAdapter kgEditDataMapperAdapter;


	
	@Autowired
	KgEditRelationMapperAdapter kgEditRelationMapperAdapter;
	@Autowired
	KgEditDataService kgEditDataService;
	@Autowired
	KgDataLogMapperAdapter kgDataLogMapperAdapter;
	/**
	 * <p>
	 * New Info
	 * </p>
	 * 
	 * @param kgRelation
	 * @return
	 */
	@Transactional
	public WZResponseEntity<?> add(LoginUser user, KgRelation kgRelation) {

		WZResponseEntity<?> rst = new WZResponseEntity<>();

		if (kgRelation.getId() == null || kgRelation.getId().equals(""))
			kgRelation.setId(UUIDUtil.get32UUID());

		if (kgRelation.getVersionId() == null || kgRelation.getVersionId().equals(""))
			kgRelation.setVersionId("1.0.0");

		KgRelation tp = kgRelationMapper.selectByName(kgRelation);
		if (tp != null) {
			rst.setIsSuccess(false);
			rst.setErrorMsg("名称重复!");
		} else {

			if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

				// 处理attrs
				kgObjectPropertyService.resetRelationAttr(kgRelation.getId(), kgRelation.getAttrs());

				boolean isok = kgRelationMapper.insertSelective(kgRelation) > 0;

				rst.setIsSuccess(isok);

			} else {
				KgEditRelation data = new KgEditRelation(kgRelation);
				//data.setId(UUIDUtil.get32UUID());
				data.setId(kgRelation.getId());
				return kgEditRelationService.add(user, data);
			}

		}

		return rst;
	}

	@Transactional
	public WZResponseEntity<?> saveOrmodify(LoginUser user, KgRelation kgClass) {
		WZResponseEntity<?> rst = new WZResponseEntity<>();

		KgRelation tp = kgRelationMapper.selectByName(kgClass);
		if (tp != null) {
			kgClass.setId(tp.getId());
			kgClass.setVersionId(tp.getVersionId());
			rst = modify(user, kgClass);
		} else {
			rst = add(user, kgClass);
		}

		return rst;
	}

	public KgRelation selectByName(KgRelation kgRelation) {
		return kgRelationMapper.selectByName(kgRelation);
	}
	
	   /**
     * 根据实体id查询  指定用户编辑中的对应Edit实体数据,或者实体
     * @param entityid
     * @return
     * @author:kxjl
     * @date 2020年8月19日
     */
	public KgRelation getOneByIdInAudit(String userid,String entityid) {
		
	
		KgRelation tp =null;

		KgEditData q=new KgEditData();
		q.setEditUser(userid);
		q.setEditOriDataId(entityid);
		q.setQueryStates(new String[] {"1","2"});
		//q.setAuditState("1");//待提交的 或者已提交
		List<KgEditData> edatas= kgEditDataMapperAdapter.selectList(q);
		if(edatas!=null&&edatas.size()>0)
		{
			 tp= kgEditRelationService. getOne( edatas.get(0).getEditDataId());
				if (tp != null)
					tp.setDataFromType("2");
		}
		
		if(tp==null)
		{
			tp = getOne(entityid, Constants.DEFULT_VERSION);
			if (tp != null)
				tp.setDataFromType("1");
			
		}
		
		
		return tp;
		
	}


	/**
	 * <p>
	 * Modify Info
	 * </p>
	 * 
	 * @param kgRelation
	 * @return
	 */
	@Transactional
	public WZResponseEntity<?> modify(LoginUser user, KgRelation kgRelation) {

		WZResponseEntity<?> rst = new WZResponseEntity<>();

		KgRelation tp = kgRelationMapper.selectByName(kgRelation);
		if (tp != null && !tp.getId().equals(kgRelation.getId())) {
			rst.setIsSuccess(false);
			rst.setErrorMsg("名称重复!");
		} else {

			if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

				// 处理attrs
				kgObjectPropertyService.resetRelationAttr(kgRelation.getId(), kgRelation.getAttrs());

				boolean isok = kgRelationMapper.updateByPrimaryKeySelective(kgRelation) > 0;

				rst.setIsSuccess(isok);
			} else {
				return kgEditRelationService.modify(user, new KgEditRelation(kgRelation));
			}

		}

		return rst;

	}

	/**
	 * <p>
	 * Delete
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@Transactional
	public Boolean delete(LoginUser user, String id, String version) {
		// return kgRelationMapper.deleteByPrimaryKey(id) > 0;

		if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {
return deleteData(id,version);
		
		} else {
			return kgEditRelationService.delete(user, id);
		}

	}
	
	private Boolean deleteData( String id, String version) {
		if (id.contains(",")) {
			String[] ids = id.split(",");
			for (String tid : ids) {

				KgRelation tp = getOne(tid, version);
				tp.setDeleted("1");// 1删除
				kgRelationMapper.updateByPrimaryKey(tp);
			}
			return true;
		} else {

			KgRelation tp = getOne(id, version);
			tp.setDeleted("1");// 1删除
			return kgRelationMapper.updateByPrimaryKey(tp) > 0 ? true : false;

		}
	}

	/**
	 * <p>
	 * query info by id
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@Transactional(readOnly = true)
	public KgRelation getOne(String id, String version) {
//		KgRelationKey key = new KgRelationKey();
//		key.setId(id);
//		key.setVersionId(version);
//		return kgRelationMapper.selectByPrimaryKey(key);
//		
		KgRelation q=new KgRelation();
    	q.setId(id);
    	
    	KgRelation rst=null;
    	
    	List<KgRelation> lst=kgRelationMapper.selectList(q);
    	if(lst!=null&&lst.size()>0)
    		rst=lst.get(0);
    	
    	return rst;
	}

	/**
	 * <p>
	 * query all info
	 * </p>
	 * 
	 * @return
	 */
	@Transactional(readOnly = true)
	public List<KgRelation> getAll() {
		KgRelationExample example = new KgRelationExample();
		return kgRelationMapper.selectByExample(example);
	}

	/**
	 * 增加查询列表改动标记
	 * @param user
	 * @param lst
	 * @author:kxjl
	 * @date 2020年8月6日
	 */
	private void addDiffFlag(LoginUser user, List<KgRelation> lst) {
		// 增加修改标记
		KgEditData equery = new KgEditData();
		equery.setEditUser(user.getUserId());
		equery.setAuditState("1");// 未提交
		List<KgEditData> edatas = kgEditDataMapperAdapter.selectList(equery);

		KgEditData equery2 = new KgEditData();
		equery2.setEditUser(user.getUserId());
		equery2.setAuditState("2");// 未提交
		List<KgEditData> edataAudits = kgEditDataMapperAdapter.selectList(equery2);

		JSONObject jedit = new JSONObject();

		for (KgRelation data : lst) {
			for (KgEditData eitem : edatas) {
				if (data.getId().equals(eitem.getEditOriDataId())||data.getId().equals(eitem.getEditDataId())) {

					jedit.put("editAction", eitem.getEditAction());
					jedit.put("auditState", "1");
					jedit.put("editDataId", eitem.getEditDataId());
					data.setMyEdit(jedit.toJSONString());
					
				//data.setMyEdit(eitem.getEditAction() + ":" + eitem.getEditDataId());
				}
			}

			for (KgEditData eitem : edataAudits) {
				if (data.getId().equals(eitem.getEditOriDataId())||data.getId().equals(eitem.getEditDataId())) 
				{
					jedit.put("editAction", eitem.getEditAction());
					jedit.put("auditState", "2");
					jedit.put("editDataId", eitem.getEditDataId());
					data.setMyEdit(jedit.toJSONString());
				}
					
				//	data.setMyEdit("4:" + eitem.getEditDataId());
			}

		}

	}
	
	/**
	 * 
	 * @param example
	 * @return
	 * @author:kxjl
	 * @date 2020年6月9日
	 */
	public Page<KgRelation> selectList(LoginUser user, KgRelation query, Pagination pageCondition) {
		com.github.pagehelper.Page pageinfo = PageUtil.getPage(pageCondition);

		query.setCurUser(user.getUserId());
		List<KgRelation> lst = kgRelationMapper.selectList(query);
		
		addDiffFlag(user,lst);

		Page<KgRelation> page = new Page<KgRelation>();
		page.setResults(lst);
		page.setPageNo(pageinfo.getPageNum());
		page.setPageSize(pageinfo.getPageSize());
		page.setTotalRecord((int) pageinfo.getTotal());

		return page;
	}

	/**
	 * 查询连线上的属性
	 * 
	 * @param kgRelation
	 * @return
	 * @author:kxjl
	 * @date 2020年6月19日
	 */
	public List<KgProperty> getProperty(KgRelation kgRelation) {
		return kgRelationMapper.getProperty(kgRelation);
	}
	
	@Transactional
	public WZResponseEntity<?> audit(LoginUser user, KgRelation kgItem, KgEditData editData) {

		WZResponseEntity<?> rst = new WZResponseEntity<>();

		String auditRstId = "";// 当前审核合并后的数据id,也存到 对应的edit表中.
		if (editData.getAuditState().equals("5")) // 不通过
		{

		} else if (editData.getAuditState().equals("3") || editData.getAuditState().equals("4")) // 通过
		{

			KgRelation olddata = getOne(kgItem.getId(), Constants.DEFULT_VERSION);

			// 多人修改,并且多个人全部为删除操作，则最后删除
			if (editData.getEditAction().contains(",")) {
				String[] actions = editData.getEditAction().split(",");
				boolean alldelete = true;
				for (String ac : actions) {
					if (!ac.equals("3")) {
						alldelete = false;
						break;
					}
				}
				if (alldelete) {
					deleteData(editData.getEditOriDataId(), Constants.DEFULT_VERSION);
				}

			}

			// 修改真实数据
			if (editData.getEditAction().equals("3"))// 单人删除
			{
				deleteData(editData.getEditOriDataId(), Constants.DEFULT_VERSION);
			} else if (editData.getEditAction().equals("1"))// 单人新增
			{
				
				add(user,kgItem);
			} else // 合并修改，只要有一个人不删除，均按修改操作
			{
				modify(user,kgItem);
			}

			// 保存当前审核结果数据备份，包括删除的
			KgRelation auditRst = getOne(kgItem.getId(), Constants.DEFULT_VERSION);
			if (auditRst != null) {

				KgEditRelation edata = new KgEditRelation(auditRst);
				auditRstId = UUIDUtil.get32UUID();
				edata.setId(auditRstId);
				kgEditRelationService.addtionData(edata);
				kgEditRelationMapperAdapter.insertSelective(edata);

			} else {
				// 保存删除的快照
				KgEditRelation eolddata = new KgEditRelation(olddata);
				auditRstId = UUIDUtil.get32UUID();
				eolddata.setId(auditRstId);
				eolddata.setDeleted("0");
				kgEditRelationService.addtionData(eolddata);
				kgEditRelationMapperAdapter.insertSelective(eolddata);
			}

			// 保存快照数据id
			editData.setAuditRstId(auditRstId);

			
			String idold = "";
			if(olddata!=null)
			{
			// 保存编辑前数据备份-》edit表
				KgEditRelation eolddata = new KgEditRelation(olddata);
			 idold = UUIDUtil.get32UUID();
			eolddata.setId(idold);
			kgEditRelationService.addtionData(eolddata);
			kgEditRelationMapperAdapter.insertSelective(eolddata);
			}

			// 记录数据修改日志
			KgDataLog dlog = new KgDataLog();
			dlog.setId(UUIDUtil.get32UUID());
			dlog.setAuditUser(user.getUserId());
			dlog.setDataId(kgItem.getId());
			dlog.setDataType("5");
			dlog.setEditAction(editData.getEditAction());
			dlog.setEditUser(editData.getEditUser());
			dlog.setEditUserName(editData.getEditUserName());

			// 记录对应备份的数据id
			dlog.setEditDataPre(idold);
			dlog.setEditDataNext(auditRstId);

			kgDataLogMapperAdapter.insertSelective(dlog);

		}

		// 修改审核数据
		kgEditDataService.audit(user, editData);

		rst.setIsSuccess(true);

		return rst;
	}

}