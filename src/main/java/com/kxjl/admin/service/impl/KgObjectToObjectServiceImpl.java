/**
 * Copyright (c) 2019 kxjl All Rights Reserved.
 * 
 * This software license agreement (the "Agreement") is a legal agreement between the user 
 * ("You" or the "User") and kxjl ("kxjl") 
 * for the software products (the "Software") and related services (the "Service") that 
 * accompanies this Agreement, as may be updated or replaced by feature enhancements, 
 * updates or maintenance releases and any services that may be provided by kxjl under this Agreement. 
 * You are not allowed to download, install or use the Software or to use Services unless 
 * you accept all the terms and conditions of this Agreement. Your downloading, 
 * installation and use of the Software shall be regarded as your acceptance of the Agreement 
 * and your agreement to be bound by all the terms and conditions of this Agreement.
 * 
 * The above notice shall be included in all copies or substantial portions of the Software.
 * 
 * The software is provided "as is", without warranty of any kind, express or implied, 
 * including but not limited to the warranties of merchantability, fitness for a particular 
 * purpose and noninfringement. In no event shall the authors or copyright holders be 
 * liable for any claim, damages or other liability, whether in an action of contract, 
 * tort or otherwise, arising from, out of or in connection with the software or the use 
 * or other dealings in the software.
 */
package com.kxjl.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

//import org.neo4j.driver.Driver;
//import org.neo4j.driver.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kxjl.admin.persistence.entity.KgObjectToObjectExample;
import com.kxjl.admin.persistence.entity.KgObjectToObjectKey;
import com.kxjl.admin.persistence.entity.KgProperty;
import com.kxjl.admin.persistence.entity.KgPropertyDatatype;
import com.kxjl.admin.persistence.entity.KgPropertyDatatypeKey;
import com.kxjl.admin.persistence.entity.KgRelation;
import com.kxjl.admin.persistence.entity.KgSubGroup;
import com.kxjl.admin.persistence.entity.KgClass;
import com.kxjl.admin.persistence.entity.KgDataLog;
import com.kxjl.admin.persistence.entity.KgEditClass;
import com.kxjl.admin.persistence.entity.KgEditData;
import com.kxjl.admin.persistence.entity.KgEditEntity;
import com.kxjl.admin.persistence.entity.KgEditObjectToObject;
import com.kxjl.admin.persistence.entity.KgEntity;
import com.kxjl.admin.persistence.entity.KgEntityKey;
import com.kxjl.admin.persistence.entity.KgObjectProperty;
import com.kxjl.admin.persistence.entity.KgObjectToObject;
import com.kxjl.admin.service.KgClassService;
import com.kxjl.admin.service.KgEditDataService;
import com.kxjl.admin.service.KgEditEntityService;
import com.kxjl.admin.service.KgEditObjectToObjectService;
import com.kxjl.admin.service.KgEntityService;
import com.kxjl.admin.service.KgObjectPropertyService;
import com.kxjl.admin.service.KgObjectToObjectService;
import com.kxjl.admin.service.KgPropertyService;
import com.kxjl.admin.service.KgRelationService;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.kxjl.admin.common.Pagination;
import com.kxjl.admin.common.WZResponseEntity;
import com.kxjl.admin.common.LoginUser;

import com.kxjl.base.util.UUIDUtil;

import com.kxjl.admin.util.Constants;
import com.kxjl.admin.util.O2oUtil;
import com.kxjl.admin.util.Page;
import com.kxjl.admin.util.PageUtil;

import com.kxjl.admin.util.Neo4jHelper;
import com.kxjl.admin.util.Neo4jHelperOneSession;
import com.kxjl.admin.persistence.adapter.dao.KgClassMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditDataMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEditEntityMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgEntityMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgObjectToObjectMapperAdapter;
import com.kxjl.admin.persistence.adapter.dao.KgRelationMapperAdapter;
import com.kxjl.admin.persistence.dao.KgObjectToObjectMapper;
import com.kxjl.admin.persistence.dao.KgPropertyDatatypeMapper;

/**
 * autoGenerated
 * 
 * @date 2020年06月08日 11:50:55
 * @author Generator
 */
@Service("kgObjectToObjectService")
public class KgObjectToObjectServiceImpl implements KgObjectToObjectService {

	@Autowired
	KgObjectToObjectMapperAdapter kgObjectToObjectMapper;

	@Autowired
	KgClassMapperAdapter kgClassMapperAdapter;

	@Autowired
	KgEntityMapperAdapter kgEntityMapperAdapter;

	@Autowired
	KgEntityService kgEntityService;

	@Autowired
	KgPropertyService kgPropertyService;

	@Autowired
	KgRelationMapperAdapter kgRelationMapperAdapter;

	@Autowired
	KgPropertyDatatypeMapper kgPropertyDatatypeMapper;

	@Autowired
	KgObjectPropertyService kgObjectPropertyService;

	@Autowired
	Neo4jHelperOneSession neo4jHelper;

	@Autowired
	KgEditDataMapperAdapter kgEditDataMapperAdapter;

	@Autowired
	KgEditObjectToObjectService kgEditObjectToObjectService;

	@Autowired
	KgEditDataService kgEditDataService;

	@Autowired
	KgRelationService kgRelationService;

	@Autowired
	KgClassService kgClassService;

	@Autowired
	KgEditEntityService kgEditEntityService;

	@Autowired
	KgEditEntityMapperAdapter kgEditEntityMapperAdapter;

	private static final Logger logger = LoggerFactory.getLogger(KgObjectToObjectServiceImpl.class);

	@Transactional
	public Boolean saveontology(LoginUser user, String data, String editUser) {

		if (user != null && user.getRoleId().contains(Constants.DEFAULT_ADMIN_ROLEID)) {

			JSONObject jdata = JSONObject.parseObject(data);

			JSONArray jarrayNodes = jdata.getJSONArray("nodes");

			JSONArray jarrayEdges = jdata.getJSONArray("edges");

			// UI 删除的关系
			JSONArray jarrayDelEdges = jdata.getJSONArray("delete");

			boolean neo4j = jdata.getBoolean("neo4j");

		//	Driver driver = neo4jHelper.createDrive();
			//(Session session = driver.session();) 
			try {

				// 编辑中删除的关系，逻辑删除
				if (jarrayDelEdges != null)
					for (int i = 0; i < jarrayDelEdges.size(); i++) {

						KgObjectToObject kquery = new KgObjectToObject();
						kquery.setId(jarrayDelEdges.getString(i));
						kquery.setVersionId("1.0.0");
						KgObjectToObject o2o = kgObjectToObjectMapper.selectByPrimaryKey(kquery);
						// 删除概念关系时，同步删除该cls节点 实体概念属性
						RemoveClsRelationAttr(o2o);

						if (o2o != null)
							// 删
							kgObjectToObjectMapper.deleteByPrimaryKey(o2o);

						if (neo4j) {
							// neo4j 删除关系
							//neo4jHelper.deleteRelationById(jarrayDelEdges.getString(i), session);
						}
					}

				// 处理节点
				for (int i = 0; i < jarrayNodes.size(); i++) {
					JSONObject node = jarrayNodes.getJSONObject(i);
					String nodetype = node.getString("nodetype");
					String label = node.getString("label");
					String nodeid = node.getString("nodeid");

					// 如果编辑实体，保存实体上的属性修改
					if (nodetype != null && nodetype.equals("1")) {
						KgEntity entity = new KgEntity();
						entity.setId(nodeid);
						entity.setVersionId(Constants.DEFULT_VERSION);
						entity.setName(label);

						try {

							// 实体属性
							JSONArray jattr = node.getJSONArray("attrs");
							if (jattr != null)
								entity.setProperties(jattr.toJSONString());

							// 实体标签
							JSONArray tags = node.getJSONArray("tags");
							if (tags != null)
								entity.setTags(tags.toJSONString());
						} catch (Exception e) {

						}

						if (nodeid == null || nodeid.equals(""))
							entity.setId(UUIDUtil.get32UUID());

						if (editUser == null) {

							// 界面直接保存数据

							KgEntity tp = kgEntityMapperAdapter.selectByPrimaryKey(entity);
							if (tp != null && tp.getDeleted().equals("0"))
								try {
									kgEntityService.modify(user, entity);
								} catch (Exception e) {
									System.out.println(e);
								}

							else {
								kgEntityService.add(user, entity);
							}
						} else {
							// 审核通过的保存逻辑， 检查实体是否有修改，同步审核处理(即使用户未提交也审核,合并到关系中);

							int a = 1;

							// 正式，包括修改，审核中的，检查是否为编辑界面新建的实体
							KgEntity tp = kgEntityService.getOneByIdInAudit(editUser, entity.getId());

							if (tp != null) {
								try {

									// 检查是否有编辑中数据
									KgEditEntity etp = kgEditEntityService.getOne(tp.getId());

									if (etp != null && (tp.getDataFromType().equals("2"))) {

										entity.setId(etp.getOriId());
										// 审核通过已有实体数据

										KgEditData eq = new KgEditData();
										eq.setEditDataId(etp.getId());
										List<KgEditData> lst = kgEditDataMapperAdapter.selectList(eq);
										if (lst != null && lst.size() > 0) {
											KgEditData editData = lst.get(0);
											editData.setAuditState("3");// 通过
											editData.setAuditInfo("审核关系时关联通过");

											if (entity.getFullName() == null)
												entity.setFullName(etp.getFullName());

											entity.setSubKgId(etp.getSubIds());
											entity.setClsId(etp.getClsId());
											entity.setDirId(etp.getDirId());

											WZResponseEntity<?> erst = kgEntityService.audit(user, entity, editData);
											// 关联实体审核失败
											if (!erst.getIsSuccess())
												return false;

											// 界面过来的关系中id对应的为Edit_entity_id
											// 修改关系中对应id的节点id为 entity_id原数据id
											// !!
											node.put("nodeid", editData.getEditOriDataId());
											jarrayNodes.set(i, node);

										}

									} else {
										// 审核过程，数据按审核界面属性，标签为准

										tp.setTags(entity.getTags());
										tp.setProperties(entity.getProperties());
										// tp.setSubIds(tp.getDirId());
										kgEntityService.modify(user, tp);

									}

								} catch (Exception e) {
									System.out.println(e);
								}
							} else {

								kgEntityService.add(user, entity);
							}
						}

						if (neo4j) {
							//if (neo4jHelper.findNodeById(entity.getId(), session)) {
								// 更新
							//	neo4jHelper.updateNode(entity, session);

							//} else {
								// 新增
							//	neo4jHelper.createNode(entity, session);
							//}
						}

					}

				}

				if (jarrayEdges != null)
					for (int i = 0; i < jarrayEdges.size(); i++) {

						JSONObject edge = jarrayEdges.getJSONObject(i);

						KgObjectToObject kgObjectToObject = new KgObjectToObject();

						String o2oid = edge.getString("o2oid");

						kgObjectToObject.setRelationId(edge.getString("lineid"));
						kgObjectToObject.setId(o2oid);// id
						kgObjectToObject.setRelationName(edge.getString("label"));
						kgObjectToObject.setFromId(getNodeAttr(jarrayNodes, edge.getString("source"), "nodeid"));
						kgObjectToObject.setFromType(getNodeAttr(jarrayNodes, edge.getString("source"), "nodetype")); // 1实体
																														// 2class

						kgObjectToObject.setToId(getNodeAttr(jarrayNodes, edge.getString("target"), "nodeid"));

						kgObjectToObject.setToType(getNodeAttr(jarrayNodes, edge.getString("target"), "nodetype")); // 1实体
																													// 2class

						if (kgObjectToObject.getToId().equals("") || kgObjectToObject.getFromId().equals("")) {
							// 失败！
							return false;
						}

						kgObjectToObject.setVersionId("1.0.0");

						kgObjectToObject.setFromData(
								"{\"x\":\"" + getNodeAttr(jarrayNodes, edge.getString("source"), "x") + "\","
										+ "\"y\":\"" + getNodeAttr(jarrayNodes, edge.getString("source"), "y") + "\"}");
						kgObjectToObject.setToData("{\"x\":\"" + getNodeAttr(jarrayNodes, edge.getString("target"), "x")
								+ "\"," + "\"y\":\"" + getNodeAttr(jarrayNodes, edge.getString("target"), "y") + "\"}");

						kgObjectToObject.setFromName(getNodeAttr(jarrayNodes, edge.getString("source"), "label"));
						kgObjectToObject.setToName(getNodeAttr(jarrayNodes, edge.getString("target"), "label"));

						JSONArray jattr = edge.getJSONArray("attrs");
						if (jattr != null)
							kgObjectToObject.setRelationProperties(jattr.toJSONString());

						if (o2oid == null || o2oid.equals("")) {
							o2oid = UUIDUtil.get32UUID();
							kgObjectToObject.setId(o2oid);
						}

						KgObjectToObjectKey tp = getOne(o2oid, Constants.DEFULT_VERSION);
						if (tp != null) {
							// 正式数据修改
							kgObjectToObjectMapper.updateByPrimaryKeySelective(kgObjectToObject);
						} else {
							// 审核新增start
							// 检查是否为审核edit数据
							KgEditObjectToObject etp = kgEditObjectToObjectService.getOne(o2oid);
							if (etp != null) {

								KgObjectToObject realo2o = getOne(etp.getOriId(), Constants.DEFULT_VERSION);
								kgObjectToObject.setId(etp.getOriId());
								if (realo2o != null) {
									// 审核通过逻辑
									kgObjectToObjectMapper.updateByPrimaryKeySelective(kgObjectToObject);
								} else {

									add(kgObjectToObject);
								}

							}
							// 审核新增end

							else {
								// 正式数据增加
								add(kgObjectToObject);
							}
						}

						// 编辑cls关系时，同步跟新 该cls节点出发的所有关系为 cls 实体概念属性
						AddOrUpdateClsRelationAttr(user, kgObjectToObject);

						if (neo4j) {
							// 关系先删除，再添加
							//neo4jHelper.deleteRelationById(o2oid, session);
						//	neo4jHelper.createRelation(kgObjectToObject, session);
						}
					}
			
			}catch(Exception e) {}

			//driver.close();

			return true;
		} else {
			return kgEditObjectToObjectService.saveontology(user, data, false);
		}

	}

	/**
	 * 替换连线 source,target id
	 * 
	 * @param editId
	 * @param id
	 * @param jarrayEdges
	 * @return
	 * @author:kxjl
	 * @date 2020年8月20日
	 */
	private JSONArray changeNodeEditIdToId(String editId, String id, JSONArray jarrayEdges) {
		JSONArray array = new JSONArray();

		int a = 0;
		for (int i = 0; i < jarrayEdges.size(); i++) {

			JSONObject edge = jarrayEdges.getJSONObject(i);

			String source = edge.getString("source");
			String target = edge.getString("target");

			if (source.equals(editId))
				edge.put("source", id);

			if (target.equals(editId))
				edge.put("target", id);

			array.add(edge);

		}

		return array;

	}

	/**
	 * 查询领域关系数量
	 * 
	 * @param subKgId
	 * @return
	 * @author:kxjl
	 * @date 2020年7月24日
	 */
	public List<KgObjectToObject> getSubKgRelation(String subKgId) {
		List<KgObjectToObject> relations = new ArrayList<KgObjectToObject>();

		KgSubGroup sg = new KgSubGroup();
		sg.setId(subKgId);
		// 查询领域下关系
		relations = kgObjectToObjectMapper.getSubKgRelation(sg);
		return relations;
	}

	public WZResponseEntity<?> TestDb(String dburl, String username, String pass) {
		WZResponseEntity rst = new WZResponseEntity<>();
		rst.setIsSuccess(false);

		Neo4jHelper cneo4jHelper = new Neo4jHelper();
		cneo4jHelper.init(dburl, username, pass);
		boolean isok = cneo4jHelper.testDb();

		rst.setBody(isok);
		rst.setIsSuccess(true);

		return rst;

	}

	/**
	 * 按领域同步数据，只要是领域下的实体存在关系均同步
	 * 
	 * @param subkgId
	 * @return
	 * @author:kxjl
	 * @date 2020年7月23日
	 */
	public WZResponseEntity<?> DataToNeo4j(LoginUser user, String dburl, String username, String pass, String subkgId) {
		WZResponseEntity rst = new WZResponseEntity<>();
		rst.setIsSuccess(false);

		// 已经处理过的节点id
		List<String> doneEntityIds = new ArrayList<String>();
		try {

			Neo4jHelperOneSession cneo4jHelper = new Neo4jHelperOneSession();
			cneo4jHelper.init(dburl, username, pass);

			//Driver driver = cneo4jHelper.createDrive();
			//(Session session = driver.session();)
			try  {

				List<KgObjectToObject> relations = getSubKgRelation(subkgId);

				for (int i = 0; i < relations.size(); i++) {

					KgObjectToObject kgObjectToObject = relations.get(i);

					KgEntityKey efkey = new KgEntityKey();
					efkey.setId(kgObjectToObject.getFromId());
					efkey.setVersionId(Constants.DEFULT_VERSION);
					KgEntity efrom = kgEntityMapperAdapter.selectByPrimaryKey(efkey);
					if (efrom != null && !doneEntityIds.contains(efrom.getId())) {
						String log = "";
						//if (cneo4jHelper.findNodeById(efrom.getId(), session)) {
							// 更新
						//	log = cneo4jHelper.updateNode(efrom, session);

						//} else {
							// 新增
						//	log = cneo4jHelper.createNode(efrom, session);
						//}
						doneEntityIds.add(efrom.getId());
					//	MyWebSocketHandler.sendMessage("{\"id\":\"" + subkgId + "\",\"now\":\"" + i + "\",\"total\":\""
					//			+ relations.size() + "\",\"log\":\"" + log + "\"}", user.getUserId());
					}

					KgEntityKey etkey = new KgEntityKey();
					etkey.setId(kgObjectToObject.getToId());
					etkey.setVersionId(Constants.DEFULT_VERSION);
					KgEntity eto = kgEntityMapperAdapter.selectByPrimaryKey(etkey);
					if (eto != null && !doneEntityIds.contains(eto.getId())) {
						String log = "";
						//if (cneo4jHelper.findNodeById(eto.getId(), session)) {
							// 更新
						//	log = cneo4jHelper.updateNode(eto, session);

						//} else {
							// 新增
						//	log = cneo4jHelper.createNode(eto, session);
						//}
						doneEntityIds.add(eto.getId());
					//	MyWebSocketHandler.sendMessage("{\"id\":\"" + subkgId + "\",\"now\":\"" + i + "\",\"total\":\""
					//			+ relations.size() + "\",\"log\":\"" + log + "\"}", user.getUserId());
					}

					String rlog = "";
					// 关系先删除，再添加
					//cneo4jHelper.deleteRelationById(kgObjectToObject.getId(), session);
					//rlog = cneo4jHelper.createRelation(kgObjectToObject, session);

				//	MyWebSocketHandler.sendMessage("{\"id\":\"" + subkgId + "\",\"now\":\"" + i + "\",\"total\":\""
				//			+ relations.size() + "\",\"log\":\"" + rlog + "\"}", user.getUserId());

				}

				
				//MyWebSocketHandler.sendMessage("{\"id\":\"" + subkgId + "\",\"now\":\"" + relations.size()
				//		+ "\",\"total\":\"" + relations.size() + "\",\"log\":\"" + "全部完成" + "\"}", user.getUserId());

			}catch (Exception e) {
				// TODO: handle exception
			}

			//driver.close();

			rst.setIsSuccess(true);
		} catch (Exception e) {
			// TODO: handle exception
		}

		return rst;

	}

	/**
	 * 新增或者更新 概念关系为 概念 的实体属性
	 * 
	 * @param kgObjectToObject
	 * @author:kxjl
	 * @date 2020年7月9日
	 */
	private void AddOrUpdateClsRelationAttr(LoginUser user, KgObjectToObject kgObjectToObject) {
		if (kgObjectToObject != null && kgObjectToObject.getFromType().equals("2")) {
			KgClass classQuery = new KgClass();
			classQuery.setClsName(kgObjectToObject.getFromName());
			KgClass curCls = kgClassMapperAdapter.selectByName(classQuery);
			// 更新或者新增该cls的 实体属性(关系-》属性)

			String[] clsAttrNames = curCls.getAttrNames().split(",");
			String[] clsAttrIds = curCls.getAttrs().split(",");
			String attrId = "";
			for (int j = 0; j < clsAttrNames.length; j++) {
				if (clsAttrNames[j].equals(kgObjectToObject.getRelationName())) {
					attrId = clsAttrIds[j];
					break;
				}
			}

			KgProperty relationAttr = new KgProperty();
			relationAttr.setName(kgObjectToObject.getRelationName());
			// 选择实体类型时的，限定cls类型
			relationAttr.setClsId("{\"value\":\"" + kgObjectToObject.getToId() + "\",\"label\":\""
					+ kgObjectToObject.getToName() + "\",\"key\":\"" + kgObjectToObject.getToId() + "\"}");
			relationAttr.setDataTypeId("2");// 实体属性
			relationAttr.setCannull("1");// 可空

			if (attrId.equals("")) {

				KgProperty tpattr = kgPropertyService.getOneByName(relationAttr.getName(), Constants.DEFULT_VERSION);
				if (tpattr == null) {
					// 新增属性
					relationAttr.setId(UUIDUtil.get32UUID());
					kgPropertyService.add(user, relationAttr);
					tpattr = relationAttr;
				}

				// 新增cls-attr关联
				KgObjectProperty op = new KgObjectProperty();
				op.setClsId(kgObjectToObject.getFromId());
				op.setPropId(tpattr.getId());
				kgObjectPropertyService.add(op);

			} else {
				// 更新属性
				relationAttr.setId(attrId);
				kgPropertyService.modify(user, relationAttr);
			}
		}
	}

	/**
	 * 删除 概念关系时 同步删除概念 的实体属性
	 * 
	 * @param kgObjectToObject
	 * @author:kxjl
	 * @date 2020年7月9日
	 */
	private void RemoveClsRelationAttr(KgObjectToObject kgObjectToObject) {
		if (kgObjectToObject != null && kgObjectToObject.getFromType().equals("2")) {
			KgClass classQuery = new KgClass();
			classQuery.setId(kgObjectToObject.getFromId());
			classQuery.setVersionId(Constants.DEFULT_VERSION);
			KgClass curCls = kgClassMapperAdapter.selectByPrimaryKey(classQuery);
			curCls = kgClassMapperAdapter.selectByName(curCls);
			// 更新或者新增该cls的 实体属性(关系-》属性)

			try {

				String[] clsAttrNames = curCls.getAttrNames().split(",");
				String[] clsAttrIds = curCls.getAttrs().split(",");
				String attrId = "";
				for (int j = 0; j < clsAttrNames.length; j++) {
					if (clsAttrNames[j].equals(kgObjectToObject.getRelationName())) {
						attrId = clsAttrIds[j];
						break;
					}
				}

				if (!attrId.equals("")) {
					// 删除cls-attr关联

					kgObjectPropertyService.deleteByClsAndPro(kgObjectToObject.getFromId(), attrId);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
	}

	private String getNodeAttr(JSONArray jarrayNodes, String nodeid, String attrName) {

		String name = "";
		for (int i = 0; i < jarrayNodes.size(); i++) {
			JSONObject edge = jarrayNodes.getJSONObject(i);
			if (edge.getString("id").equals(nodeid)) {
				name = edge.getString(attrName);
				break;
			}
		}

		return name;

	}

	/**
	 * 优先返回用户编辑中的本地数据
	 * 
	 * @param id
	 * @param userId
	 * @return
	 * @author:kxjl
	 * @date 2020年8月20日
	 */
	private KgEntity getEntityDetail(String id, String userId) {

		KgEntity data = kgEntityService.getOneByIdInAudit(userId, id);

		return data;
	}

	private KgClass getClsDetail(String id, String userId) {
		KgClass data = kgClassService.getOneByIdInAudit(userId, id);

		return data;
	}

	private KgRelation getRelationDetail(String id, String userId) {
		KgRelation data = kgRelationService.getOneByIdInAudit(userId, id);

		return data;
	}

	/**
	 * 加载可视化图形数据
	 * 
	 * @param user
	 * @param kgClass
	 * @param level
	 * @param showEdit
	 *            是否显示本地编辑数据. false：只显示正式数据，true:有本地编辑数据的替换显示本地数据
	 * @return
	 * @author:kxjl
	 * @date 2020年8月21日
	 */
	public String getGraDataByLevel(LoginUser user, KgClass kgClass, int level, boolean showEdit) {

		String oriId = kgClass.getId();
		// String realoriId= oriId.startsWith("r:")?oriId.substring(2):oriId;
		// if (oriId.contains(":")) {
		// //每一次编辑关系都独立显示，即使多人同时编辑同一关系
		// String realoriId = oriId.split(":")[1];
		// kgClass.setId(realoriId);
		// }

		kgClass.setId(O2oUtil.getOriId(oriId));

		List<KgObjectToObject> O2o = getObjRelationByLevel(kgClass, level);
		//
		// List<KgClass> nodes= getClassByLevel(kgClass, level);
		// List<KgRelation> edges= getRelationByLevel(kgClass, level);

		List<String> nodeids = new ArrayList<>();

		JSONArray jarrayNodes = new JSONArray();

		JSONArray jarrayEdges = new JSONArray();

		for (int i = 0; i < O2o.size(); i++) {

			JSONObject jnodef = new JSONObject();

			// from
			jnodef.put("nodeid", O2o.get(i).getFromId());
			jnodef.put("id", O2o.get(i).getFromId());
			jnodef.put("nodetype", O2o.get(i).getFromType());

			if (O2o.get(i).getFromType().equals("1"))// entity
				jnodef.put("label", O2o.get(i).getFromEntityNameReal());
			else
				jnodef.put("label", O2o.get(i).getFromClsNameReal());

			jnodef.put("attrs", O2o.get(i).getFromNodePros());
			jnodef.put("tags", O2o.get(i).getFromNodeTags());

			if (O2o.get(i).getFromType().equals("2")) {
				// 概念属性
				KgClass q = new KgClass();
				q.setClsName(O2o.get(i).getFromClsNameReal());
				KgClass cls = kgClassMapperAdapter.selectByName(q);
				jnodef.put("attrNames", cls.getAttrNames());
			}

			if (showEdit) {
				KgEntity entity = getEntityDetail(O2o.get(i).getFromId(), user.getUserId());

				if (entity != null) {
					jnodef.put("label", entity.getName());
					jnodef.put("attrs", entity.getProperties());
					jnodef.put("tags", entity.getTags());

					jnodef.put("nodeid", entity.getId());

					// 图像显示本地已修改
					if (entity.getDataFromType().equals("2"))
						jnodef.put("localmodify", "true");
				}

				if (O2o.get(i).getFromType().equals("2")) {
					// 概念属性
					KgClass cls = getClsDetail(O2o.get(i).getFromId(), user.getUserId());
					if (cls != null) {
						jnodef.put("attrNames", cls.getAttrNames());
						jnodef.put("nodeid", cls.getId());
					}
				}
			}

			try {

				JSONObject fromdataxy = JSONObject.parseObject(O2o.get(i).getFromData());
				jnodef.put("x", (fromdataxy != null) ? fromdataxy.getDouble("x") : 100);
				jnodef.put("y", (fromdataxy != null) ? fromdataxy.getDouble("y") : 100);

			} catch (Exception e) {
				jnodef.put("x", 100);
				jnodef.put("y", 100);

			}

			// to
			JSONObject jnodet = new JSONObject();

			jnodet.put("nodeid", O2o.get(i).getToId());
			jnodet.put("id", O2o.get(i).getToId());
			jnodet.put("nodetype", O2o.get(i).getToType());

			if (O2o.get(i).getFromType().equals("1"))// entity
				jnodet.put("label", O2o.get(i).getToEntityNameReal());
			else
				jnodet.put("label", O2o.get(i).getToClsNameReal());
			jnodet.put("attrs", O2o.get(i).getToNodePros());
			jnodet.put("tags", O2o.get(i).getToNodeTags());

			if (O2o.get(i).getToType().equals("2")) {
				// 概念属性
				KgClass q = new KgClass();
				q.setClsName(O2o.get(i).getToClsNameReal());
				KgClass cls = kgClassMapperAdapter.selectByName(q);
				jnodet.put("attrNames", cls.getAttrNames());
			}

			if (showEdit) {
				if (O2o.get(i).getFromType().equals("1"))// entity
				{

					KgEntity tpentity = getEntityDetail(O2o.get(i).getToId(), user.getUserId());
					if (tpentity != null) {
						jnodet.put("label", tpentity.getName());
						jnodet.put("attrs", tpentity.getProperties());
						jnodet.put("tags", tpentity.getTags());
						jnodet.put("nodeid", tpentity.getId());

						// 图像显示本地已修改
						if (tpentity.getDataFromType().equals("2"))
							jnodet.put("localmodify", "true");

					}
				}

				else {
					// 概念属性
					KgClass cls = getClsDetail(O2o.get(i).getToId(), user.getUserId());
					if (cls != null) {
						jnodet.put("attrNames", cls.getAttrNames());
						jnodet.put("nodeid", cls.getId());
					}
				}
			}

			try {
				JSONObject todataxy = JSONObject.parseObject(O2o.get(i).getToData());
				jnodet.put("x", (todataxy != null) ? todataxy.getDouble("x") : 100);
				jnodet.put("y", (todataxy != null) ? todataxy.getDouble("y") : 100);
			} catch (Exception e) {
				jnodet.put("x", 100);
				jnodet.put("y", 100);
			}

			// relation
			JSONObject jnoder = new JSONObject();
			jnoder.put("label", O2o.get(i).getLineNameReal());
			jnoder.put("id", O2o.get(i).getId());
			jnoder.put("o2oid", O2o.get(i).getId());
			jnoder.put("lineid", O2o.get(i).getRelationId());
			jnoder.put("source", O2o.get(i).getFromId());
			jnoder.put("target", O2o.get(i).getToId());
			jnoder.put("fromData", O2o.get(i).getFromData());
			jnoder.put("toData", O2o.get(i).getToData());

			jnoder.put("attrs", O2o.get(i).getRelationProperties());

			// if (showEdit) {
			// KgRelation re = getRelationDetail(O2o.get(i).getRelationId(),
			// user.getUserId());
			//
			// if(re!=null)
			// {
			// jnoder.put("attrs", O2o.get(i).getRelationProperties());
			//
			// }

			// }

			if (!nodeids.contains(O2o.get(i).getFromId())) {
				nodeids.add(O2o.get(i).getFromId());
				jarrayNodes.add(jnodef);
			}
			if (!nodeids.contains(O2o.get(i).getToId())) {
				nodeids.add(O2o.get(i).getToId());
				jarrayNodes.add(jnodet);
			}

			jarrayEdges.add(jnoder);

		}

		// 检查一对节点多个连线问题，分别连接不同节点
		// targetAnchor
		jarrayEdges = CheckOverlapRelation(jarrayEdges);

		if (O2o.size() == 0) {
			// 没有关系的，返回本身单节点数据
			kgClass.setVersionId(Constants.DEFULT_VERSION);
			KgClass clsNode = kgClassMapperAdapter.selectByPrimaryKey(kgClass);
			if (clsNode != null) {
				// 概念图谱
				JSONObject jnodef = new JSONObject();
				jnodef.put("label", clsNode.getClsName());
				jnodef.put("nodeid", clsNode.getId());
				jnodef.put("nodetype", "2"); // cls
				jnodef.put("id", clsNode.getId());
				jnodef.put("x", 300);
				jnodef.put("y", 300);

				jarrayNodes.add(jnodef);
			} else {
				// 实体图谱
				KgEntity query = new KgEntity();
				query.setId(kgClass.getId());
				query.setVersionId(Constants.DEFULT_VERSION);
				KgEntity entity = kgEntityMapperAdapter.selectByPrimaryKey(query);
				if (entity != null) {
					JSONObject jnodef = new JSONObject();
					jnodef.put("label", entity.getName());
					jnodef.put("nodeid", entity.getId());
					jnodef.put("nodetype", "1"); // entity

					jnodef.put("attrs", entity.getProperties());
					if (entity.getProperties() == null || entity.getProperties().equals("[]")) {
						JSONArray jattrs = new JSONArray();
						// 从cls取
						List<KgProperty> props = kgEntityService.getProperty(query);
						for (int j = 0; j < props.size(); j++) {

							JSONObject jattr = new JSONObject();
							jattr.put("id", props.get(j).getId());
							jattr.put("label", props.get(j).getName());
							jattr.put("rule", props.get(j).getDataTypeRule());
							jattr.put("value", "");

							jattrs.add(jattr);
						}

						entity.setProperties(jattrs.toString());
						jnodef.put("attrs", entity.getProperties());
					}

					jnodef.put("tags", entity.getTags());
					if (entity.getTags() == null || entity.getTags().equals("[]")) {
						entity.setTags("[{\"color\":\"#26a0b7\",\"label\":\"" + entity.getClsName() + "\",\"text\":\""
								+ entity.getClsName() + "\",\"value\":\"" + entity.getClsName() + "\",\"key\":\""
								+ entity.getClsName() + "\"}]");
						jnodef.put("tags", entity.getTags());
					}

					jnodef.put("id", entity.getId());
					jnodef.put("x", 300);
					jnodef.put("y", 300);

					jarrayNodes.add(jnodef);
				}

			}

		}

		JSONObject jrst = new JSONObject();
		jrst.put("nodes", jarrayNodes);
		jrst.put("edges", jarrayEdges);

		return jrst.toJSONString();
	}

	/**
	 * 检查重叠的线，来源/目标相同，连接至不同的连接点
	 * 
	 * @param jarrayEdges
	 * @author:kxjl
	 * @date 2020年7月20日
	 */
	public JSONArray CheckOverlapRelation(JSONArray jarrayEdges) {
		JSONArray newLines = new JSONArray();
		// s-target,lines
		// 重叠的关系
		Map<String, List> overlaps = new HashMap<String, List>();

		for (int i = 0; i < jarrayEdges.size(); i++) {

			JSONObject jrelation = jarrayEdges.getJSONObject(i);

			String starget = jrelation.getString("source") + "-" + jrelation.getString("target");
			String starget2 = jrelation.getString("target") + "-" + jrelation.getString("source");

			List<JSONObject> rels = new ArrayList<JSONObject>();
			String exsitKey = starget;
			if (overlaps.containsKey(starget)) {
				rels = overlaps.get(starget);
				exsitKey = starget;
			}
			if (overlaps.containsKey(starget2)) {
				rels = overlaps.get(starget2);
				exsitKey = starget2;
			}

			rels.add(jrelation);

			overlaps.put(exsitKey, rels);
		}

		for (String key : overlaps.keySet()) {

			// 同一对节点间的所有连线
			List<JSONObject> rels = overlaps.get(key);

			// 多条连线
			if (rels.size() > 1) {

				// 计算连线角度
				JSONObject jf = JSONObject.parseObject(rels.get(0).getString("fromData"));
				JSONObject jt = JSONObject.parseObject(rels.get(0).getString("toData"));

				double length = Math.sqrt((jf.getDoubleValue("x") - jt.getDoubleValue("x"))
						* (jf.getDoubleValue("x") - jt.getDoubleValue("x"))
						+ (jf.getDoubleValue("y") - jt.getDoubleValue("y"))
								* (jf.getDoubleValue("y") - jt.getDoubleValue("y")));
				double angle = 180 * Math.acos((jt.getDoubleValue("x") - jf.getDoubleValue("x")) / length) / Math.PI;

				int ydirect = jt.getDoubleValue("y") - jf.getDoubleValue("y") >= 0 ? 1 : -1;// 1右边，-1左边

				int linedirect = direct(angle, ydirect);

				for (int i = 0; i < rels.size(); i++) {

					JSONObject line = rels.get(i);

					// 前端实时绘制
					// switch (linedirect) {
					// case 1:
					//
					// line.put("sourceAnchor", 1);// 8个节点
					// line.put("targetAnchor", 5);// 8个节点
					// break;
					// case 2:
					// line.put("sourceAnchor", 7);// 8个节点
					// line.put("targetAnchor", 3);// 8个节点
					// break;
					// case 3:
					// line.put("sourceAnchor", 5);// 8个节点
					// line.put("targetAnchor", 1);// 8个节点
					// break;
					// case 4:
					// line.put("sourceAnchor", 3);// 8个节点
					// line.put("targetAnchor", 7);// 8个节点
					// break;
					//
					// default:
					// break;
					// }

					line.put("lineType", "Q");// 曲线
					line.put("heightRate", i + 1);// 曲线高度

					if (i == 0)
						line.put("updown", 0);// 曲线上湾1，下湾-1
					else
						line.put("updown", i % 2 == 0 ? 1 : -1);// 曲线上湾1，下湾-1

					newLines.add(line);
				}
			} else {
				newLines.add(rels.get(0));
			}

		}

		return newLines;

	}

	/**
	 * 四象限
	 * 
	 * @param angle
	 * @param ydirect
	 * @return
	 * @author:kxjl
	 * @date 2020年7月21日
	 */
	private int direct(double angle, int ydirect) {

		if (ydirect > 0) {
			if (angle <= 90)
				return 4;
			else
				return 3;
		}

		if (angle <= 90)
			return 1;
		else
			return 2;
	}

	/**
	 * 根据class查询一二三级关系的所有关系
	 * 
	 * @param kgClass
	 * @param level
	 *            1,2,3
	 * @return
	 * @author:kxjl
	 * @date 2020年6月16日
	 */
	public List<KgObjectToObject> getObjRelationByLevel(KgClass kgClass, int level) {

		List<KgObjectToObject> rst = new ArrayList<>();
		switch (level) {
		case 1:
			rst = kgObjectToObjectMapper.getLevelOneRelation(kgClass);
			break;
		case 2:
			rst = kgObjectToObjectMapper.getLevelTwoRelation(kgClass);
			break;
		case 3:
			rst = kgObjectToObjectMapper.getLevelThreeRelation(kgClass);
			break;

		}
		return rst;
	}

	/**
	 * <p>
	 * New Info
	 * </p>
	 * 
	 * @param kgObjectToObject
	 * @return
	 */
	@Transactional
	public Boolean add(KgObjectToObject kgObjectToObject) {

		if (kgObjectToObject.getId() == null || kgObjectToObject.getId().equals(""))
			kgObjectToObject.setId(UUIDUtil.get32UUID());

		if (kgObjectToObject.getVersionId() == null || kgObjectToObject.getVersionId().equals(""))
			kgObjectToObject.setVersionId("1.0.0");

		return kgObjectToObjectMapper.insertSelective(kgObjectToObject) > 0;
	}

	/**
	 * 批量导入适用.根据toname, relationname ,fromname 全量匹配更新
	 */
	public WZResponseEntity<?> saveOrmodify(KgObjectToObject item) {
		WZResponseEntity<?> rst = new WZResponseEntity<>();

		KgObjectToObject tp = getOneByThreeName(item.getFromEntityNameReal(), item.getLineNameReal(),
				item.getToEntityNameReal());
		if (tp != null) {
			item.setId(tp.getId());
			item.setVersionId(tp.getVersionId());

			if (buildO2OIdInfo(item)) {

				boolean brst = modify(item);
				rst.setIsSuccess(brst);
			}
		} else {

			Random r = new Random(new Date().getTime());

			JSONObject frompoint = new JSONObject();
			frompoint.put("x", String.valueOf((r.nextDouble() * 500.0)));
			frompoint.put("y", String.valueOf((r.nextDouble() * 500.0)));
			item.setFromData(frompoint.toJSONString());

			JSONObject topoint = new JSONObject();
			topoint.put("x", String.valueOf((r.nextDouble() * 500.0)));
			topoint.put("y", String.valueOf((r.nextDouble() * 500.0)));
			item.setToData(topoint.toJSONString());

			if (buildO2OIdInfo(item)) {
				boolean brst = add(item);
				rst.setIsSuccess(brst);
			}
		}

		return rst;
	}

	/**
	 * 根据实体名称补充id信息
	 * 
	 * @param item
	 * @author:kxjl
	 * @date 2020年7月2日
	 */
	private boolean buildO2OIdInfo(KgObjectToObject item) {

		boolean rst = false;

		try {

			KgEntity equery = new KgEntity();
			equery.setFullName(item.getFromEntityNameReal());
			KgEntity fromNode = kgEntityMapperAdapter.selectByName(equery);
			if (fromNode == null) {
				// 没有实体，新建默认实体
				fromNode = kgEntityService.createByName(item.getFromEntityNameReal());

			}

			KgEntity tquery = new KgEntity();
			tquery.setFullName(item.getToEntityNameReal());
			KgEntity toNode = kgEntityMapperAdapter.selectByName(tquery);
			if (toNode == null) {
				// 没有实体，新建默认实体
				toNode = kgEntityService.createByName(item.getToEntityNameReal());

			}

			KgRelation rquery = new KgRelation();
			rquery.setName(item.getLineNameReal());
			KgRelation relation = kgRelationMapperAdapter.selectByName(rquery);
			if (relation == null) {
				// 没有关系，新建默关系

				relation = new KgRelation();
				relation.setId(UUIDUtil.get32UUID());
				relation.setName(item.getLineNameReal());
				relation.setVersionId(Constants.DEFULT_VERSION);

				kgRelationMapperAdapter.insertSelective(relation);

			}

			item.setFromId(fromNode.getId());
			item.setToId(toNode.getId());
			item.setRelationId(relation.getId());
			rst = true;
		} catch (Exception e) {
			logger.error("buildO2OIdInfo:" + e.getMessage());
		}

		return rst;
	}

	public KgObjectToObject getOneByThreeName(String fromEntityName, String relationName, String toEntityName) {
		KgObjectToObject key = new KgObjectToObject();
		key.setFromEntityNameReal(fromEntityName);
		key.setToEntityNameReal(toEntityName);
		key.setLineNameReal(relationName);
		return kgObjectToObjectMapper.selectByThreeName(key);
	}

	/**
	 * <p>
	 * Modify Info
	 * </p>
	 * 
	 * @param kgObjectToObject
	 * @return
	 */
	@Transactional
	public Boolean modify(KgObjectToObject kgObjectToObject) {
		return kgObjectToObjectMapper.updateByPrimaryKeySelective(kgObjectToObject) > 0;
	}

	/**
	 * <p>
	 * Delete
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@Transactional
	public Boolean delete(String id, String version) {
		KgObjectToObjectKey key = new KgObjectToObjectKey();
		key.setId(id);
		key.setVersionId(version);
		return kgObjectToObjectMapper.deleteByPrimaryKey(key) > 0;
	}

	/**
	 * <p>
	 * query info by id
	 * </p>
	 * 
	 * @param id
	 * @return
	 */
	@Transactional(readOnly = true)
	public KgObjectToObject getOne(String id, String version) {
		KgObjectToObjectKey key = new KgObjectToObjectKey();
		key.setId(id);
		key.setVersionId(version);
		return kgObjectToObjectMapper.selectByPrimaryKey(key);
	}

	/**
	 * <p>
	 * query all info
	 * </p>
	 * 
	 * @return
	 */
	@Transactional(readOnly = true)
	public List<KgObjectToObject> getAll() {
		KgObjectToObjectExample example = new KgObjectToObjectExample();
		return kgObjectToObjectMapper.selectByExample(example);
	}

	/**
	 * 
	 * @param example
	 * @return
	 * @author:kxjl
	 * @date 2020年6月9日
	 */
	public Page<KgObjectToObject> selectList(KgObjectToObject query, Pagination pageCondition) {
		com.github.pagehelper.Page pageinfo = PageUtil.getPage(pageCondition);

		List<KgObjectToObject> lst = kgObjectToObjectMapper.selectList(query);

		Page<KgObjectToObject> page = new Page<KgObjectToObject>();
		page.setResults(lst);
		page.setPageNo(pageinfo.getPageNum());
		page.setPageSize(pageinfo.getPageSize());
		page.setTotalRecord((int) pageinfo.getTotal());

		return page;
	}

	/**
	 * 删除出发关系
	 * 
	 * @param query
	 * @author:kxjl
	 * @date 2020年7月8日
	 */
	public void deleteByFromClsId(KgObjectToObject query) {
		kgObjectToObjectMapper.deleteByFromClsId(query);
	}

	public WZResponseEntity<?> audit(LoginUser user, String data) {

		WZResponseEntity rst = new WZResponseEntity<>();
		rst.setIsSuccess(false);

		JSONObject jdata = JSONObject.parseObject(data);

		JSONArray jarrayNodes = jdata.getJSONArray("nodes");

		JSONArray jarrayEdges = jdata.getJSONArray("edges");

		// UI 删除的关系
		JSONArray jarrayDelEdges = jdata.getJSONArray("delete");

		String oriId = jdata.getString("oriId");

		String auditState = jdata.getString("auditState");
		String auditInfo = jdata.getString("auditInfo");

		boolean neo4j = jdata.getBoolean("neo4j");

		KgEditData editData = kgEditDataService.getOne(oriId);

		editData.setAuditInfo(auditInfo);
		editData.setAuditState(auditState);

		String oid = editData.getEditOriDataId();// 原始编辑 随机id:实体id
		String realoriId = oid;
		// oid.startsWith("r:") ? oid.substring(2) : oid;

		// 每一次编辑关系都独立显示，即使多人同时编辑同一关系
		// if(oid.contains(":"))
		// {
		// realoriId= oid.split(":")[1];
		// }
		realoriId = O2oUtil.getOriId(oid);

		KgClass cls = kgClassService.getOne(realoriId, Constants.DEFULT_VERSION);
		if (cls != null)
			editData.setEditDataName("[概念]" + cls.getClsName() + "");
		KgEntity eentity = kgEntityService.getOne(realoriId, Constants.DEFULT_VERSION);
		if (eentity != null)
			editData.setEditDataName("[实体]" + eentity.getName() + "");

		editData.setEditOriDataId(oriId);

		try {

			String auditRstId = "";// 当前审核合并后的数据id,也存到 对应的edit表中.
			if (auditState.equals("5")) // 不通过
			{

			} else if (auditState.equals("3") || auditState.equals("4")) // 通过
			{

				saveontology(user, data, editData.getEditUser());

				// 审核通过快照
				// String rstId = "r:" + UUIDUtil.get32UUID();
				// String rstId = UUIDUtil.get32UUID() +":" + UUIDUtil.get32UUID();
				String rstId = O2oUtil.generateOriId(UUIDUtil.get32UUID());
				jdata.put("oriId", rstId);
				kgEditObjectToObjectService.saveontology(user, jdata.toJSONString(), true);

				// 保存快照数据id
				editData.setAuditRstId(rstId);

				//
				// // 记录数据修改日志
				// KgDataLog dlog = new KgDataLog();
				// dlog.setId(UUIDUtil.get32UUID());
				// dlog.setAuditUser(user.getUserId());
				// dlog.setDataId(kgItem.getId());
				// dlog.setDataType("3");
				// dlog.setEditAction(editData.getEditAction());
				// dlog.setEditUser(editData.getEditUser());
				// dlog.setEditUserName(editData.getEditUserName());
				//
				// // 记录对应备份的数据id
				// dlog.setEditDataPre(idold);
				// dlog.setEditDataNext(auditRstId);
				//
				// kgDataLogMapperAdapter.insertSelective(dlog);

			}

			// 修改审核数据
			kgEditDataService.audit(user, editData);

			rst.setIsSuccess(true);
		} catch (Exception e) {
			System.out.println(e);
			rst.setErrorMsg("审核失败! 关联属性还未通过审核!");
		}

		return rst;
	}

}
